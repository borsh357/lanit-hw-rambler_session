<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="RAMBLER_SESSION" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">/Users/borsh/Desktop/LANIT/Jmeter5_Rambler_session/cities.csv</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="variableNames">query</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">www.rambler.ru</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_2" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_2</stringProp>
            <stringProp name="Argument.value">id.rambler.ru</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_3" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_3</stringProp>
            <stringProp name="Argument.value">www.google-analytics.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_4" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_4</stringProp>
            <stringProp name="Argument.value">stats.g.doubleclick.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_5" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_5</stringProp>
            <stringProp name="Argument.value">ssp.rambler.ru</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_6" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_6</stringProp>
            <stringProp name="Argument.value">img02.ssp.rambler.ru</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_7" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_7</stringProp>
            <stringProp name="Argument.value">img01.ssp.rambler.ru</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_8" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_8</stringProp>
            <stringProp name="Argument.value">securepubads.g.doubleclick.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_9" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_9</stringProp>
            <stringProp name="Argument.value">kraken.rambler.ru</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_10" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_10</stringProp>
            <stringProp name="Argument.value">pagead2.googlesyndication.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_11" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_11</stringProp>
            <stringProp name="Argument.value">nova.rambler.ru</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_12" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_12</stringProp>
            <stringProp name="Argument.value">otkritkiok.ru</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_13" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_13</stringProp>
            <stringProp name="Argument.value">api.otkritkiok.ru</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_14" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_14</stringProp>
            <stringProp name="Argument.value">showcase-players.grattis.ru</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BASE_URL_15" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_15</stringProp>
            <stringProp name="Argument.value">cdn.jsdelivr.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UC01_RAMBLER" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${__threadGroupName}_GOTO ${__threadNum}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.rambler.ru/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="RandomTimer.range">0.0</stringProp>
              <stringProp name="ConstantTimer.delay">0</stringProp>
              <stringProp name="TestPlan.comments">Recorded time was 0 milliseconds</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://id.rambler.ru/api/v3/session/getRsidx" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;ridkmc0hmcrewgcuv0fo&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v3/session/getRsidx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.google-analytics.com/j/collect?v=1&amp;_v=j88&amp;a=4506201&amp;t=pageview&amp;_s=1&amp;dl=https%3A%2F%2Fwww.rambler.ru%2F&amp;ul=en-us&amp;de=UTF-8&amp;dt=%D0%A0%D0%B0%D0%BC%D0%B1%D0%BB%D0%B5%D1%80%2F%D0%BD%D0%BE%D0%B2%D0%BE%D1%81%D1%82%D0%B8%2C%20%D0%BF%D0%BE%D1%87%D1%82%D0%B0%20%D0%B8%20%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%20%E2%80%94%20%D0%BC%D0%B5%D0%B4%D0%B8%D0%B9%D0%BD%D1%8B%D0%B9%20%D0%BF%D0%BE%D1%80%D1%82%D0%B0%D0%BB%3A%20%D0%BD%D0%BE%D0%B2%D0%BE%D1%81%D1%82%D0%B8%20%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D0%B8%20%D0%B8%20%D0%BC%D0%B8%D1%80%D0%B0%2C%20%D1%8D%D0%BB%D0%B5%D0%BA%D1%82%D1%80%D0%BE%D0%BD%D0%BD%D0%B0%D1%8F%20%D0%BF%D0%BE%D1%87%D1%82%D0%B0%2C%20%D0%BF%D0%BE%D0%B3%D0%BE%D0%B4%D0%B0%2C%20%D1%80%D0%B0%D0%B7%D0%B2%D0%BB%D0%B5%D0%BA%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5%20%D0%B8%20%D0%BA%D0%BE%D0%BC%D0%BC%D1%83%D0%BD%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D1%8B%D0%B5%20%D1%81%D0%B5%D1%80%D0%B2%D0%B8%D1%81%D1%8B.%20%D0%9D%D0%BE%D0%B2%D0%BE%D1%81%D1%82%D0%B8%20%D1%81%D0%B5%D0%B3%D0%BE%D0%B4%D0%BD%D1%8F%20%D0%B8%20%D1%81%D0%B5%D0%B9%D1%87%D0%B0%D1%81&amp;sd=24-bit&amp;sr=1440x900&amp;vp=1290x690&amp;je=0&amp;_u=AACAAEABAAAAAC~&amp;jid=401316639&amp;gjid=87288357&amp;cid=1878042504.1615898838&amp;tid=UA-18802658-1&amp;_gid=194658056.1615898838&amp;_r=1&amp;_slc=1&amp;z=1958418553" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="a" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">a</stringProp>
                  <stringProp name="Argument.value">4506201</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="de" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">de</stringProp>
                  <stringProp name="Argument.value">UTF-8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="jid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">jid</stringProp>
                  <stringProp name="Argument.value">401316639</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_slc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_slc</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dl</stringProp>
                  <stringProp name="Argument.value">https://www.rambler.ru/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gjid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gjid</stringProp>
                  <stringProp name="Argument.value">87288357</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tid</stringProp>
                  <stringProp name="Argument.value">UA-18802658-1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_gid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_gid</stringProp>
                  <stringProp name="Argument.value">194658056.1615898838</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">dt</stringProp>
                  <stringProp name="Argument.value">Рамблер/новости, почта и поиск — медийный портал: новости России и мира, электронная почта, погода, развлекательные и коммуникационные сервисы. Новости сегодня и сейчас</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sd</stringProp>
                  <stringProp name="Argument.value">24-bit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_r</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">pageview</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_s" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_s</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_u" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">_u</stringProp>
                  <stringProp name="Argument.value">AACAAEABAAAAAC~</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                  <stringProp name="Argument.value">j88</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ul" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ul</stringProp>
                  <stringProp name="Argument.value">en-us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">vp</stringProp>
                  <stringProp name="Argument.value">1290x690</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="z" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">z</stringProp>
                  <stringProp name="Argument.value">1958418553</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="je" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">je</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sr" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sr</stringProp>
                  <stringProp name="Argument.value">1440x900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">1878042504.1615898838</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_3}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">j/collect</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://stats.g.doubleclick.net/j/collect?t=dc&amp;aip=1&amp;_r=3&amp;v=1&amp;_v=j88&amp;tid=UA-18802658-1&amp;cid=1878042504.1615898838&amp;jid=401316639&amp;gjid=87288357&amp;_gid=194658056.1615898838&amp;_u=AACAAEAAAAAAAC~&amp;z=1372570246" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_r" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_r</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">t</stringProp>
                  <stringProp name="Argument.value">dc</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="jid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">jid</stringProp>
                  <stringProp name="Argument.value">401316639</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_u" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">_u</stringProp>
                  <stringProp name="Argument.value">AACAAEAAAAAAAC~</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                  <stringProp name="Argument.value">j88</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="aip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">aip</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="z" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">z</stringProp>
                  <stringProp name="Argument.value">1372570246</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">tid</stringProp>
                  <stringProp name="Argument.value">UA-18802658-1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gjid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gjid</stringProp>
                  <stringProp name="Argument.value">87288357</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cid</stringProp>
                  <stringProp name="Argument.value">1878042504.1615898838</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="_gid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_gid</stringProp>
                  <stringProp name="Argument.value">194658056.1615898838</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_4}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">j/collect</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://ssp.rambler.ru/userip" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">userip</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://id.rambler.ru/api/v3/session/getRsidx" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;ridkmc0hnsp5yf8t8ear&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v3/session/getRsidx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://ssp.rambler.ru/blockstat_post" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;log_visibility&quot;:0,&quot;blocktype&quot;:&quot;capirs&quot;,&quot;format&quot;:&quot;0x0&quot;,&quot;width&quot;:0,&quot;height&quot;:0,&quot;time&quot;:0,&quot;ftime&quot;:3175,&quot;ftime_intersection&quot;:3175,&quot;place&quot;:&quot;&quot;,&quot;pad_id&quot;:432151618,&quot;block_id&quot;:464081666,&quot;reason&quot;:&quot;no_banner&quot;,&quot;reached&quot;:2,&quot;impression_id&quot;:&quot;60502-a91c2-18a45&quot;,&quot;uuid&quot;:&quot;00000bbc-6050-a8d4-6878-1d955f72b49f&quot;,&quot;fp&quot;:&quot;pA8AAN9Js1fMQNL2ARGPuAA=&quot;,&quot;fp_version&quot;:&quot;1.1.0&quot;,&quot;ip_used_by_fp&quot;:&quot;178.176.175.135&quot;,&quot;experimental_fps&quot;:{&quot;firstIPByte&quot;:&quot;pA8AAN9Js1eIvCKxAX7N8QA=&quot;,&quot;joinedFirstIPByte&quot;:&quot;pA8AAN9Js1fxmJmRAYGXtgA=178&quot;,&quot;joinedFirstSecondIPBytes&quot;:&quot;pA8AAN9Js1fxmJmRAYGXtgA=178176&quot;,&quot;withoutIP&quot;:&quot;pA8AAN9Js1fxmJmRAYGXtgA=&quot;},&quot;vcapirs&quot;:&quot;8_1_0&quot;,&quot;misc&quot;:0,&quot;rq_type&quot;:1,&quot;browser_family&quot;:&quot;Chrome&quot;,&quot;browser_version&quot;:&quot;88.0.4324.192&quot;,&quot;os_family&quot;:&quot;Mac OS&quot;,&quot;os_version&quot;:&quot;10.14.4&quot;,&quot;device_type&quot;:1,&quot;pageNumber&quot;:1,&quot;node_id&quot;:&quot;xmrij-464081666&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">blockstat_post</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://img02.ssp.rambler.ru/file.jsp?url=pVnu3GaRqJ0g78zRG87awdSf2rZg-5jLw9sZsHRhHM*WOqmelX9xXl-QzKlrkfdXp-4QQmKf23HRgZiOHutQnhVph-syCF4CUuedn-zyGxmjHsx*Take-AaTNMZpHvgKsoahXHPfQ-PxdNL09J5Btd0BlkG2UCN3nuatvH85lZcAlXRv2fh8GXsr8N2cmWxcb4Sc9T8lFJ9POkI5oZf9JKguTVVEm5HcGu1xjZN0KRdahmmD3eeA5zpO099Gge0F0OkP0ggwg-yvJLtJ7KxxvUSC5bR-qZXltSXA14oGYl2IZODyZGQTAcA8t8mSXxUZTKg8sSYEkturZc7Ts3jIURSzGCNXTUwxdV3SIH-c5zgg5VVmpybNVbdEXn9avp-y0y-Jan5-dU7hNRhtD6AzJgU42A00BWQDvZuL9xqTQRmCbco7mJ9AqA-B-8mhhkxt0JlbMj1gr3UuwkbU8JeQh3wCjqZQrhBmUL2ex1zksbGbhlU9wzLJvJ4ZxttHZQ5f92glw2SK03-ql9knC4Qy3tV2ScQsc4BI8BzvFipYT*XgNVprmQyBV2Jwf-8uJCG-cr5H95c7Zx5CQf*eAUMXFsGvMLB2uvXIc46nnS9e0EivV4gpptvBhngiImjKEMbsi7lhoPOhwaKg39sgRFfsa5w1uGQ9S4kDlBG5PRDZveGSwvoYnG--v*Z1UfYtggpyo0bAVCLTtdm8j*VVfxAJqeRt-metfaeL3CXhcHMbMXKq9nkGOksXpWVMquM6qaeXVdjAcdAOkF1dJ6cHIi1zy3DFBue9MzwwAbWiFuPDtSTxlBb2ZSyS014njcoWnwIc93dFUPpp5t0GwE5Je*AQoL-Jo*ehlNLTDK5nKZO9xrI8OyLvo9LGW0JBSOkUsltiy3*RA7lfFUv2ldKeHMeSVCY9v9Eii3kUq2awpqtxJ0YhTlNHIBihB3LoLPrcbWi4LuzWXrWZ9GQon2tuhYClrN5kwWh2Xi2jJXxWLlIdK2XveYG936d4AYgMs*u2cRZt1drV6W4FTPxt9VkaumbRDPjC3eH0ImAIIBLSezZbNv2sUWtRQL2hUqaRSBWNBIMJV3pP2V09amEUj7xIR6S9xfGId3m3pFhCFT6K5oQdSokGNzqO9dnYtr3garcdL4tWOjYfiE*Q67fRI-oaCpzXi-8vLZsRQTdP56dp8ArZtRwE5Yokk7N*Q7FiLZs8AlaCzs-xkVdhoWHEetYh3ZyqWZJgvyFU-gd6HwUqXHFIL9GktdPyqGrL8BHrhc7c8hxoYg2cewTgklNzfYYmUF-LdO5Byj2wyPEmJFirCrGNAERMv6VLavti7KcYxdkHKvGhLYUOScLZJ4g60rwz4zxb1QOz6mO5e35Iot2WQm6jXRcv9cdwO3OEO0NjDKzSy5uw4QrhR8StKZgOGISlSwcLkUFOK*YQi3Dn03G4m3QkYqLyb5rQKFNS4mMWB4KSTrgi7kh1myR78LImoSU0Lxngcb4q9PUEheODPi3JqR03r7EVzOtb4dXq1dxEsVGfe*dWe2CwcDvLmo66q9xClv1myL3Mp8jAYYgxG-JKij41XMrc3*19-4U8UtVcd8Y*kixYlHHiexHnufs6QsSt*ynjpTM*LNBrhoAPsAPEkZICs0aZl5A5LNSwbK1OYoT2DtUG5zUBcxJDNeh96SsbogEv8Ea3BU975ro*gBN-tkMHFcMCAAAAuty8CgAAAAA&amp;eurl%5B%5D=4wjrrOxXRJHzT7aN03ht7NSE1qWUzEjLxU4ne9cncvGzqWRrGGSc3RrPXPjYmX94m1l1KN22fCZ0jE7KEiZNrQ5QnyWP3Wh8z*7gQFcToJYCAAAAuty8CgAAAAA&amp;seq=0" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="eurl[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eurl[]</stringProp>
                  <stringProp name="Argument.value">4wjrrOxXRJHzT7aN03ht7NSE1qWUzEjLxU4ne9cncvGzqWRrGGSc3RrPXPjYmX94m1l1KN22fCZ0jE7KEiZNrQ5QnyWP3Wh8z*7gQFcToJYCAAAAuty8CgAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">pVnu3GaRqJ0g78zRG87awdSf2rZg-5jLw9sZsHRhHM*WOqmelX9xXl-QzKlrkfdXp-4QQmKf23HRgZiOHutQnhVph-syCF4CUuedn-zyGxmjHsx*Take-AaTNMZpHvgKsoahXHPfQ-PxdNL09J5Btd0BlkG2UCN3nuatvH85lZcAlXRv2fh8GXsr8N2cmWxcb4Sc9T8lFJ9POkI5oZf9JKguTVVEm5HcGu1xjZN0KRdahmmD3eeA5zpO099Gge0F0OkP0ggwg-yvJLtJ7KxxvUSC5bR-qZXltSXA14oGYl2IZODyZGQTAcA8t8mSXxUZTKg8sSYEkturZc7Ts3jIURSzGCNXTUwxdV3SIH-c5zgg5VVmpybNVbdEXn9avp-y0y-Jan5-dU7hNRhtD6AzJgU42A00BWQDvZuL9xqTQRmCbco7mJ9AqA-B-8mhhkxt0JlbMj1gr3UuwkbU8JeQh3wCjqZQrhBmUL2ex1zksbGbhlU9wzLJvJ4ZxttHZQ5f92glw2SK03-ql9knC4Qy3tV2ScQsc4BI8BzvFipYT*XgNVprmQyBV2Jwf-8uJCG-cr5H95c7Zx5CQf*eAUMXFsGvMLB2uvXIc46nnS9e0EivV4gpptvBhngiImjKEMbsi7lhoPOhwaKg39sgRFfsa5w1uGQ9S4kDlBG5PRDZveGSwvoYnG--v*Z1UfYtggpyo0bAVCLTtdm8j*VVfxAJqeRt-metfaeL3CXhcHMbMXKq9nkGOksXpWVMquM6qaeXVdjAcdAOkF1dJ6cHIi1zy3DFBue9MzwwAbWiFuPDtSTxlBb2ZSyS014njcoWnwIc93dFUPpp5t0GwE5Je*AQoL-Jo*ehlNLTDK5nKZO9xrI8OyLvo9LGW0JBSOkUsltiy3*RA7lfFUv2ldKeHMeSVCY9v9Eii3kUq2awpqtxJ0YhTlNHIBihB3LoLPrcbWi4LuzWXrWZ9GQon2tuhYClrN5kwWh2Xi2jJXxWLlIdK2XveYG936d4AYgMs*u2cRZt1drV6W4FTPxt9VkaumbRDPjC3eH0ImAIIBLSezZbNv2sUWtRQL2hUqaRSBWNBIMJV3pP2V09amEUj7xIR6S9xfGId3m3pFhCFT6K5oQdSokGNzqO9dnYtr3garcdL4tWOjYfiE*Q67fRI-oaCpzXi-8vLZsRQTdP56dp8ArZtRwE5Yokk7N*Q7FiLZs8AlaCzs-xkVdhoWHEetYh3ZyqWZJgvyFU-gd6HwUqXHFIL9GktdPyqGrL8BHrhc7c8hxoYg2cewTgklNzfYYmUF-LdO5Byj2wyPEmJFirCrGNAERMv6VLavti7KcYxdkHKvGhLYUOScLZJ4g60rwz4zxb1QOz6mO5e35Iot2WQm6jXRcv9cdwO3OEO0NjDKzSy5uw4QrhR8StKZgOGISlSwcLkUFOK*YQi3Dn03G4m3QkYqLyb5rQKFNS4mMWB4KSTrgi7kh1myR78LImoSU0Lxngcb4q9PUEheODPi3JqR03r7EVzOtb4dXq1dxEsVGfe*dWe2CwcDvLmo66q9xClv1myL3Mp8jAYYgxG-JKij41XMrc3*19-4U8UtVcd8Y*kixYlHHiexHnufs6QsSt*ynjpTM*LNBrhoAPsAPEkZICs0aZl5A5LNSwbK1OYoT2DtUG5zUBcxJDNeh96SsbogEv8Ea3BU975ro*gBN-tkMHFcMCAAAAuty8CgAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="seq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">seq</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">file.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://img01.ssp.rambler.ru/file.jsp?url=00oQHte8mV-EecNW6n*Dcnk1LJf8l7LIOZyCLeblxpBYZb9TOTPXnMgL41h4Ah5s0RyrsmrXI4C-LMnk7x-zHaRpYk-omKdFRM8js-V96uQjmN-fwQMjaKFLFfNUHvsvz*hFHB1UTiIf4MX-xoy-zLpMeLijBanfVXxYt9QBtWgtdBfq5TvTZ-eV0Zmn6orQMFKJSaGd8DeLv2Am*FEoz-ZYFU81rzrBM2h*mGl7Y1cD0QmD4DQ2xw05QPTlFKa7n79DD8REmoelHHoT*b6jmAz47Qnr0*TKvtbntjA91nAJG2hDiZFzufGJP1AAcw4eB*9Yp913LPx5o2xb6mnRKNc5U74KAabV7n**KNAZKgOUTFWYiGw-ucLpSBKqXcMcdbkl7*qXjf96e*bNTShS0s*wHAHFhlh-RV8SOV9LNOemTTYZs1FU*PkSbf6-L7pLv3nKqGHy1BKnouQ72kAqn4uhmsCMh32FiT7u0gS8AWTQ9*94Xq8OHHf1VdFZNxodUkhY6GSAk15JoyUfORBAjxblLZM*8sAO4FiV4wv4T1dogpJNnT-DQMu82T9lqKPjuz-Z0Ig6Sf-Wv6CVVFnEJPxqcFWfBQh7d*wViKOQpfm7ca7wp5TMCemkrvnS0EsmOIxlE7xYb2Kn2RUW4*5B0DcCSvhhXBwdWYE2UwtdSshhC84peKY893Ih1jZKru2iwXyJ2hM4ep3M1v6YTQWjYOuImFWack886m4lus8WolDCclfDPQX5bIHYeKvxsZo1KElrOFP5*fEGyQIan6uCiq2XZ1d1W6*260Lf3Aigne*JfWtWk53eHWZifcpqky4O8fZdqEMky48KdGaHuj*5TpoF5*yYyreaBw*7Lz*dALayrKlB0XKs9gnBuGuw2tarftwJPaBY7Rm8TsidB0lMRSl4El8y*IPxs0p41a5cJsSIJeQ8m0E0Qhf4uo*FdWT8WOOgdUkIxWbMrODv68*ARZGH1ui358NjlJWJ9kuoryK8I1bKEILVuXPBC96WJLsbQR0GDVMx3PnGL*-Z6TB6j3*vJKMl9rHDdxPF4CWblxX95BwTMVi8QrNbTkAuzh58qFNeOuXPcFU-EYEO1dCHq2uwH7CZ*D5a17ZGg9FBvLy8YPR6F42fhVLSmgXdnZ*3xKEuNedFD7u9ZootivE7eX8ojfXww6wANWonYTvVBIJU9-6bVl072xL0eZWAy*qXpr6xMmP1cAPJhS-rJIorxNmEIcm2zkKPPI3Tr*R3CB3y2iPbFDI5yzEARXb3G92EEDunJkajnS39-LeuKtwZZCllEj6jCAKsczvzEecEZZDQW4Hn2nbQHQ8*SxIsHSzifk5uevQswY7mO0JwarBcEQ9nQSRHzDInU*sEseMIDJQ8es65KPkNplexmG7Eobioph4kLiU2B3wcW9jiSmwIqDpXqFi5JCASgDWXPGeDmVAz0UTyRfOzJDq9auzdCrw3q23nAbqYC-0LXfFHsvPuVXuf3ZTxnbYbfoTYcUzhuEcGVmc77rKe03LsrPKt1wVcx9X1jk*-NO8UCELnTHNNHRFiWml-EBfPdKMoy3sP20YC0TfTe8ZllcDhk*UPVh*mQYp4tbVCRvOuAvhuMsTnuHKkFJWDXI4GLkG*rpY5hfxSQEywomSSvmzohxxzXM6Gu6sdmKcftp-261U5WCcgGW1tSn6U0RSQ7-R05CGe3oTbsRhwYZDtHYqoubhAoiFTAgAAALrcvAoAAAAA&amp;eurl%5B%5D=zHm1KC6R59pqt1xDrvqUjX192vAmOdwTVCeqDrrmOhUqZqJwafcfSU7yPEWJGoVIZGrjfW8im0VoE3nL7VcXXSOrhLFRSEOzNXPRLUKrIErCh-StGU7rdX7qCoWjmBnZAgAAALrcvAoAAAAA&amp;seq=0" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="eurl[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eurl[]</stringProp>
                  <stringProp name="Argument.value">zHm1KC6R59pqt1xDrvqUjX192vAmOdwTVCeqDrrmOhUqZqJwafcfSU7yPEWJGoVIZGrjfW8im0VoE3nL7VcXXSOrhLFRSEOzNXPRLUKrIErCh-StGU7rdX7qCoWjmBnZAgAAALrcvAoAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">00oQHte8mV-EecNW6n*Dcnk1LJf8l7LIOZyCLeblxpBYZb9TOTPXnMgL41h4Ah5s0RyrsmrXI4C-LMnk7x-zHaRpYk-omKdFRM8js-V96uQjmN-fwQMjaKFLFfNUHvsvz*hFHB1UTiIf4MX-xoy-zLpMeLijBanfVXxYt9QBtWgtdBfq5TvTZ-eV0Zmn6orQMFKJSaGd8DeLv2Am*FEoz-ZYFU81rzrBM2h*mGl7Y1cD0QmD4DQ2xw05QPTlFKa7n79DD8REmoelHHoT*b6jmAz47Qnr0*TKvtbntjA91nAJG2hDiZFzufGJP1AAcw4eB*9Yp913LPx5o2xb6mnRKNc5U74KAabV7n**KNAZKgOUTFWYiGw-ucLpSBKqXcMcdbkl7*qXjf96e*bNTShS0s*wHAHFhlh-RV8SOV9LNOemTTYZs1FU*PkSbf6-L7pLv3nKqGHy1BKnouQ72kAqn4uhmsCMh32FiT7u0gS8AWTQ9*94Xq8OHHf1VdFZNxodUkhY6GSAk15JoyUfORBAjxblLZM*8sAO4FiV4wv4T1dogpJNnT-DQMu82T9lqKPjuz-Z0Ig6Sf-Wv6CVVFnEJPxqcFWfBQh7d*wViKOQpfm7ca7wp5TMCemkrvnS0EsmOIxlE7xYb2Kn2RUW4*5B0DcCSvhhXBwdWYE2UwtdSshhC84peKY893Ih1jZKru2iwXyJ2hM4ep3M1v6YTQWjYOuImFWack886m4lus8WolDCclfDPQX5bIHYeKvxsZo1KElrOFP5*fEGyQIan6uCiq2XZ1d1W6*260Lf3Aigne*JfWtWk53eHWZifcpqky4O8fZdqEMky48KdGaHuj*5TpoF5*yYyreaBw*7Lz*dALayrKlB0XKs9gnBuGuw2tarftwJPaBY7Rm8TsidB0lMRSl4El8y*IPxs0p41a5cJsSIJeQ8m0E0Qhf4uo*FdWT8WOOgdUkIxWbMrODv68*ARZGH1ui358NjlJWJ9kuoryK8I1bKEILVuXPBC96WJLsbQR0GDVMx3PnGL*-Z6TB6j3*vJKMl9rHDdxPF4CWblxX95BwTMVi8QrNbTkAuzh58qFNeOuXPcFU-EYEO1dCHq2uwH7CZ*D5a17ZGg9FBvLy8YPR6F42fhVLSmgXdnZ*3xKEuNedFD7u9ZootivE7eX8ojfXww6wANWonYTvVBIJU9-6bVl072xL0eZWAy*qXpr6xMmP1cAPJhS-rJIorxNmEIcm2zkKPPI3Tr*R3CB3y2iPbFDI5yzEARXb3G92EEDunJkajnS39-LeuKtwZZCllEj6jCAKsczvzEecEZZDQW4Hn2nbQHQ8*SxIsHSzifk5uevQswY7mO0JwarBcEQ9nQSRHzDInU*sEseMIDJQ8es65KPkNplexmG7Eobioph4kLiU2B3wcW9jiSmwIqDpXqFi5JCASgDWXPGeDmVAz0UTyRfOzJDq9auzdCrw3q23nAbqYC-0LXfFHsvPuVXuf3ZTxnbYbfoTYcUzhuEcGVmc77rKe03LsrPKt1wVcx9X1jk*-NO8UCELnTHNNHRFiWml-EBfPdKMoy3sP20YC0TfTe8ZllcDhk*UPVh*mQYp4tbVCRvOuAvhuMsTnuHKkFJWDXI4GLkG*rpY5hfxSQEywomSSvmzohxxzXM6Gu6sdmKcftp-261U5WCcgGW1tSn6U0RSQ7-R05CGe3oTbsRhwYZDtHYqoubhAoiFTAgAAALrcvAoAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="seq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">seq</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_7}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">file.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://img01.ssp.rambler.ru/file.jsp?url=rEuVydvWa-DomC2FqfEhNEKy8CjiVEx2jXFhlu*wuX1fKEDRk2FttUeUCaOqY4F-9rhK8OZdmp9M*Kh7jazIA8c*dFV2xJUXJzruHy0yKYqgvpKM0bGN6SdEeix2vJ3pDu2r4BJuuopE5jNRo5MLhFv2GO1PCU342E22zf8mt5inagVhzJhFVnBGUZS-kcuQ17qbEkXgUzL-5s4cIa4YTXDtTvMMutDGbx0*MnumLJulNHUGd7DeaKUBJ687zHSDLEIhN94t1RIYsuh2icEn4fbb-et6msx6EaYSFyBDOsEybAwr-QQm43qL2axai4YZQhLGwFDtOamI13GVzhbGRnLK9tl61x9AXLgplB5ANb7gzN1qjhckilZyuMmZRZo8BMN2dBrgVPhFtNw30deocsyTrxg4tRhff*xWHpyw81LaQxWddwQGjWwfr4ReIl8cYW2jf4hwYshmiKiaGTGNk2usropr0U6gAjgRRyY9bbXcS3QOwS6DXq4tJ4HI55LV7UPnf5OKC8ngduAbyh4nkpUq5OtLNDCQCo6yeYWzbTyILuvIHUGWh91n8HDdUHGVhvFQQrWJ1BSGRk4U0Z*rkTt9pkIKShZZi3aW7ZU3LdiCRoAA1VSsf0C-ZaJHDRjZazO-pq8CUrLqwfxQQoWr-XVx6icwZ46T71Gb9AV-ywQJNTsX8Nx5luZ4ROAxiubA-Xc0pdtAeVXJ*bw7ms8ykSQmk5ZIDSkaSq2xFZ4Vo3mzYThFksFeDbVgxnas7Zs*7O2yOOmuqJXuCyc6is5ch7GuFvhiPo8Ry58Lb6RIHasQdHybabJUScGeMiMpEYIcbL-Ia93taxTS9VSWWH23qSHwv2Q5dxONkTEEqmdmfwn3EWJM**IgQEu9FgxP21Ocl9eXd23OLjROox0jO3P2J4k41jJVLVKCU1faJBVDli9pyul7aZMI0kPTu8IY088oMA-hofG0Z11VknhOZl9ajLeXX39SkPJXNXAiM8JW21qeHHRGanIcmmMU7Ao5-IStGXVfVJt*aJkTTcM3Crw0*W8tATUFWZ4Rf9qYkLLZQ1J0RACqz-t26QQn1cUPYQl7p1EDmRum48zsW2nsvw7sFcuQT-7Q-hf2E*PF6W0j5cXiaCeMNJ1DdSv7P5DCb5ddVgtDek28KHDgafx3NW*2dSr1FKVCvK-zaRLf2EQZvRqXFbxPuv5j2CQOBODEn4TyWUe*Pqknv2UH8CW6hwlN*P102410LMpvAoFBZhu7E3x02lVor4pvAYLkXwu7fiLwfBt1RGjbMt6hN1kZsKDAK39H*d95RppOQ*JgSSyFOjwlfQTxcN1yRZKifUbbV9w47MktBTcNyl6PR6r1jBNIOJF0s9WdnLSUaJ0cE5-NZiSjdL4i7IJ4kAUP1gYDHOdj9q1xuDH5ZtfvqGkCaNwX4MQcot-5NowGeG0CYun0bmqMaycU33PN*DzRQqxTsc634kQyf3rBgMuj4TJcEdyIaw9VyI7SLWbVxJWOtWMcUdwO2cg2l8e9R3qoz6gQxQtcIRgdJv61r2E2kWdDcQuWmFbndaNx3nPp-6XKuWjF6-ij1TZ7qG44-0G-5x6vLPIfnMVBZ4WoSL2syj6ZKaJWxdkKQoQBVZpZ1MUYfTmZxt2iMdsteU6YwE3SNuCwdYwa6HesHaU3v83T4bAk7etiVHbH6jC2PCHMx-hqDe6G2-pCg3-iUjzJuiBIwwV4bFgVcmA0ms*BPR0l0Ih1yDoeFgIAAAC63LwKAAAAAA&amp;eurl%5B%5D=rtSCnv4VnE8lmht9wFWVEumPGQ2EfqR4IDwoXhFDyaukwDB7zG7PtgdzkZKNPka8lssfn--bCKo6iyE7q1GPNljB4s1gl**oy52UD3Jg7TIEpaQyGRqPeJC7WKqVENFDAgAAALrcvAoAAAAA&amp;seq=0" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="eurl[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eurl[]</stringProp>
                  <stringProp name="Argument.value">rtSCnv4VnE8lmht9wFWVEumPGQ2EfqR4IDwoXhFDyaukwDB7zG7PtgdzkZKNPka8lssfn--bCKo6iyE7q1GPNljB4s1gl**oy52UD3Jg7TIEpaQyGRqPeJC7WKqVENFDAgAAALrcvAoAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">rEuVydvWa-DomC2FqfEhNEKy8CjiVEx2jXFhlu*wuX1fKEDRk2FttUeUCaOqY4F-9rhK8OZdmp9M*Kh7jazIA8c*dFV2xJUXJzruHy0yKYqgvpKM0bGN6SdEeix2vJ3pDu2r4BJuuopE5jNRo5MLhFv2GO1PCU342E22zf8mt5inagVhzJhFVnBGUZS-kcuQ17qbEkXgUzL-5s4cIa4YTXDtTvMMutDGbx0*MnumLJulNHUGd7DeaKUBJ687zHSDLEIhN94t1RIYsuh2icEn4fbb-et6msx6EaYSFyBDOsEybAwr-QQm43qL2axai4YZQhLGwFDtOamI13GVzhbGRnLK9tl61x9AXLgplB5ANb7gzN1qjhckilZyuMmZRZo8BMN2dBrgVPhFtNw30deocsyTrxg4tRhff*xWHpyw81LaQxWddwQGjWwfr4ReIl8cYW2jf4hwYshmiKiaGTGNk2usropr0U6gAjgRRyY9bbXcS3QOwS6DXq4tJ4HI55LV7UPnf5OKC8ngduAbyh4nkpUq5OtLNDCQCo6yeYWzbTyILuvIHUGWh91n8HDdUHGVhvFQQrWJ1BSGRk4U0Z*rkTt9pkIKShZZi3aW7ZU3LdiCRoAA1VSsf0C-ZaJHDRjZazO-pq8CUrLqwfxQQoWr-XVx6icwZ46T71Gb9AV-ywQJNTsX8Nx5luZ4ROAxiubA-Xc0pdtAeVXJ*bw7ms8ykSQmk5ZIDSkaSq2xFZ4Vo3mzYThFksFeDbVgxnas7Zs*7O2yOOmuqJXuCyc6is5ch7GuFvhiPo8Ry58Lb6RIHasQdHybabJUScGeMiMpEYIcbL-Ia93taxTS9VSWWH23qSHwv2Q5dxONkTEEqmdmfwn3EWJM**IgQEu9FgxP21Ocl9eXd23OLjROox0jO3P2J4k41jJVLVKCU1faJBVDli9pyul7aZMI0kPTu8IY088oMA-hofG0Z11VknhOZl9ajLeXX39SkPJXNXAiM8JW21qeHHRGanIcmmMU7Ao5-IStGXVfVJt*aJkTTcM3Crw0*W8tATUFWZ4Rf9qYkLLZQ1J0RACqz-t26QQn1cUPYQl7p1EDmRum48zsW2nsvw7sFcuQT-7Q-hf2E*PF6W0j5cXiaCeMNJ1DdSv7P5DCb5ddVgtDek28KHDgafx3NW*2dSr1FKVCvK-zaRLf2EQZvRqXFbxPuv5j2CQOBODEn4TyWUe*Pqknv2UH8CW6hwlN*P102410LMpvAoFBZhu7E3x02lVor4pvAYLkXwu7fiLwfBt1RGjbMt6hN1kZsKDAK39H*d95RppOQ*JgSSyFOjwlfQTxcN1yRZKifUbbV9w47MktBTcNyl6PR6r1jBNIOJF0s9WdnLSUaJ0cE5-NZiSjdL4i7IJ4kAUP1gYDHOdj9q1xuDH5ZtfvqGkCaNwX4MQcot-5NowGeG0CYun0bmqMaycU33PN*DzRQqxTsc634kQyf3rBgMuj4TJcEdyIaw9VyI7SLWbVxJWOtWMcUdwO2cg2l8e9R3qoz6gQxQtcIRgdJv61r2E2kWdDcQuWmFbndaNx3nPp-6XKuWjF6-ij1TZ7qG44-0G-5x6vLPIfnMVBZ4WoSL2syj6ZKaJWxdkKQoQBVZpZ1MUYfTmZxt2iMdsteU6YwE3SNuCwdYwa6HesHaU3v83T4bAk7etiVHbH6jC2PCHMx-hqDe6G2-pCg3-iUjzJuiBIwwV4bFgVcmA0ms*BPR0l0Ih1yDoeFgIAAAC63LwKAAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="seq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">seq</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_7}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">file.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://img01.ssp.rambler.ru/file.jsp?url=hCz6uLSpv182BGTLDkmwDyZ3RQWGgIr2OzBI8HC-AdFzhS48CVxy*h6bWySaixXqeqdGnWaaazMaMUXC7u4vmQmP1JMeQ0Sm2160oP4GgMZGQEge8YzRzZkBnBR5Gts6U5FvHNz-kWpZtLHepIuPBGWG0zLa9NTXaaVrnS*xW8u2TNBYfHVHR5N7eD0CGFo20b99E05Qm022wFlM3QCZOG5rSq6lwJt0RIloR-qAdx4Q38k1-DK2Ydwpla*50wvdHFjg0d*BAK-fTN7Bu*ik5L*jDIM5WCb5XGJMUO5c5h1b0FGeq3VnhpW581eXOfMD1HdtV8sV9JCJvTzLt55ZsiSyNWq73Kc8DsyS9xcCd9UHraq*tt2aSZJZNVdxqIWmpxQnqELibp3PAW4DPNKeWMpXyhqiF8mIv5T*l8YPR9EJ9535OLSj0uUs7gWQg1mYaEpsBa4Vcy7c5G3MBy0CGxY05iPg6875zfwSeGwp-095gWzq3IisfvB-yae2GXIx*prvJX9RLjX-FUgIvblyroSMWaQUX9vldtvmxssoJdmuD8OKW8S7aYV4xXKCVG-eZ46*XxDeYCu1RB2QpueFfLi97Qn0lkYtWPUd3hmjrtzfqQQ3d*zAhtBvD-OBBu4dDfKpxhplN3eH5Bv9VguAmfmlIzlByEE*RWOmfe7pqhFtK*VloS56H-Cs7yyZUfTI4-FmjecG2QSsBjeNR3T-HuypsoDuUIZutem-u*4VMl-nBtPDNTATjMUBalsTxhUuv3XY-gYjEz9mTpbYRqrxalWDzzmtNThrp*stgFxZ8hsrq*9*GUqXqXlf3PU3jV7k7yvXCDxUZhOQYuKyNvUn6KoiL8EISAu6Je5TKFn-Roq0t65PE1z9OCJENG4IxdOFY1bzzfQn-TkDc*MCidqfxt5HB1QtB-pRbH8TA0ZvQAYpXwT5GektWd2trspMqYBudp8WCdF8FkjvSobg1GdP9fKbSMdwtl8BN-kHn4iJyedalDVkcNMZHaJihjvpF-psQ0Cqdoo7DIKrbRFBSyYSdnv4SmVNnbe3t*CgV-UwCgJTm2jaJXKaqswNgSHyGeD0dqjZlyf34-fP4W-T5MgTEa47W3Vc-IF1ziqF32pb-k2FKGyHJ6RBB1C*3MteGo93HLAN0qypu3y8TemvQ7XHjnApDjyt*r3y6J*asC5rmMik7SW9MzeAdR-kS8nXIIc*yqVpfdnMBRLho7fdEH6h6F1ALpBIoApiqA6ouA191iBYcHELYrrQcO5akldiCjctY7IFJ4HPZ*n5SNnI4CRWzsl4tgV9LnJJ24XwT2aWA9l1nJFyZ6CrHUX6TYDb6lfsyLjP7gtQePetstu-2KQNR98fvqlHqeKSJk*nV5paxNZreYu39DEz9eX97u7b3Hg4TnOjECK4fcmQLwN8JFekOYZzgIOaRSKEvyHBgY2NgnQ0xhPH0NmdXUpaOAivs-WbFgfB-RU9d0Dc4p9I5RFZwS7ZFqTDdu3LzubVtPKrAYuhwAb29ZWI1jHFDYrYXYGXC02DSZS6frlH3PgQQYfXdI0CNzXTaBH4oQUtF4vcV9SOK6Fo9maFqFRYxUrfju0c4YaPyKhbJ*zwoIIYIXicAwIAAAC63LwKAAAAAA&amp;eurl%5B%5D=xVfG582XgThYtAXaKTVuBpr1E0UvfvK10WQgqy9SXVkPjELo4ebJp2ZlRBE-2oHuK9Zohbodpzm2mQoNjBDsDzyk7AGhd8bd1EUXJFlwujlKfefH7i-8AxHejs6XJUv4AgAAALrcvAoAAAAA&amp;seq=0" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="eurl[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eurl[]</stringProp>
                  <stringProp name="Argument.value">xVfG582XgThYtAXaKTVuBpr1E0UvfvK10WQgqy9SXVkPjELo4ebJp2ZlRBE-2oHuK9Zohbodpzm2mQoNjBDsDzyk7AGhd8bd1EUXJFlwujlKfefH7i-8AxHejs6XJUv4AgAAALrcvAoAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">hCz6uLSpv182BGTLDkmwDyZ3RQWGgIr2OzBI8HC-AdFzhS48CVxy*h6bWySaixXqeqdGnWaaazMaMUXC7u4vmQmP1JMeQ0Sm2160oP4GgMZGQEge8YzRzZkBnBR5Gts6U5FvHNz-kWpZtLHepIuPBGWG0zLa9NTXaaVrnS*xW8u2TNBYfHVHR5N7eD0CGFo20b99E05Qm022wFlM3QCZOG5rSq6lwJt0RIloR-qAdx4Q38k1-DK2Ydwpla*50wvdHFjg0d*BAK-fTN7Bu*ik5L*jDIM5WCb5XGJMUO5c5h1b0FGeq3VnhpW581eXOfMD1HdtV8sV9JCJvTzLt55ZsiSyNWq73Kc8DsyS9xcCd9UHraq*tt2aSZJZNVdxqIWmpxQnqELibp3PAW4DPNKeWMpXyhqiF8mIv5T*l8YPR9EJ9535OLSj0uUs7gWQg1mYaEpsBa4Vcy7c5G3MBy0CGxY05iPg6875zfwSeGwp-095gWzq3IisfvB-yae2GXIx*prvJX9RLjX-FUgIvblyroSMWaQUX9vldtvmxssoJdmuD8OKW8S7aYV4xXKCVG-eZ46*XxDeYCu1RB2QpueFfLi97Qn0lkYtWPUd3hmjrtzfqQQ3d*zAhtBvD-OBBu4dDfKpxhplN3eH5Bv9VguAmfmlIzlByEE*RWOmfe7pqhFtK*VloS56H-Cs7yyZUfTI4-FmjecG2QSsBjeNR3T-HuypsoDuUIZutem-u*4VMl-nBtPDNTATjMUBalsTxhUuv3XY-gYjEz9mTpbYRqrxalWDzzmtNThrp*stgFxZ8hsrq*9*GUqXqXlf3PU3jV7k7yvXCDxUZhOQYuKyNvUn6KoiL8EISAu6Je5TKFn-Roq0t65PE1z9OCJENG4IxdOFY1bzzfQn-TkDc*MCidqfxt5HB1QtB-pRbH8TA0ZvQAYpXwT5GektWd2trspMqYBudp8WCdF8FkjvSobg1GdP9fKbSMdwtl8BN-kHn4iJyedalDVkcNMZHaJihjvpF-psQ0Cqdoo7DIKrbRFBSyYSdnv4SmVNnbe3t*CgV-UwCgJTm2jaJXKaqswNgSHyGeD0dqjZlyf34-fP4W-T5MgTEa47W3Vc-IF1ziqF32pb-k2FKGyHJ6RBB1C*3MteGo93HLAN0qypu3y8TemvQ7XHjnApDjyt*r3y6J*asC5rmMik7SW9MzeAdR-kS8nXIIc*yqVpfdnMBRLho7fdEH6h6F1ALpBIoApiqA6ouA191iBYcHELYrrQcO5akldiCjctY7IFJ4HPZ*n5SNnI4CRWzsl4tgV9LnJJ24XwT2aWA9l1nJFyZ6CrHUX6TYDb6lfsyLjP7gtQePetstu-2KQNR98fvqlHqeKSJk*nV5paxNZreYu39DEz9eX97u7b3Hg4TnOjECK4fcmQLwN8JFekOYZzgIOaRSKEvyHBgY2NgnQ0xhPH0NmdXUpaOAivs-WbFgfB-RU9d0Dc4p9I5RFZwS7ZFqTDdu3LzubVtPKrAYuhwAb29ZWI1jHFDYrYXYGXC02DSZS6frlH3PgQQYfXdI0CNzXTaBH4oQUtF4vcV9SOK6Fo9maFqFRYxUrfju0c4YaPyKhbJ*zwoIIYIXicAwIAAAC63LwKAAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="seq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">seq</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_7}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">file.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://ssp.rambler.ru/blockstat_post" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;log_visibility&quot;:0,&quot;blocktype&quot;:&quot;capirs&quot;,&quot;format&quot;:&quot;300x600&quot;,&quot;width&quot;:300,&quot;height&quot;:600,&quot;time&quot;:18,&quot;ftime&quot;:3233,&quot;ftime_intersection&quot;:3237,&quot;place&quot;:&quot;&quot;,&quot;pad_id&quot;:432151618,&quot;block_id&quot;:432151666,&quot;reason&quot;:&quot;check_size&quot;,&quot;reached&quot;:1,&quot;impression_id&quot;:&quot;6050f-a91cf-26fa3&quot;,&quot;uuid&quot;:&quot;00000bbc-6050-a8d4-6878-1d955f72b49f&quot;,&quot;fp&quot;:&quot;pA8AAN9Js1fMQNL2ARGPuAA=&quot;,&quot;fp_version&quot;:&quot;1.1.0&quot;,&quot;ip_used_by_fp&quot;:&quot;178.176.175.135&quot;,&quot;experimental_fps&quot;:{&quot;firstIPByte&quot;:&quot;pA8AAN9Js1eIvCKxAX7N8QA=&quot;,&quot;joinedFirstIPByte&quot;:&quot;pA8AAN9Js1fxmJmRAYGXtgA=178&quot;,&quot;joinedFirstSecondIPBytes&quot;:&quot;pA8AAN9Js1fxmJmRAYGXtgA=178176&quot;,&quot;withoutIP&quot;:&quot;pA8AAN9Js1fxmJmRAYGXtgA=&quot;},&quot;vcapirs&quot;:&quot;8_1_0&quot;,&quot;misc&quot;:0,&quot;rq_type&quot;:1,&quot;browser_family&quot;:&quot;Chrome&quot;,&quot;browser_version&quot;:&quot;88.0.4324.192&quot;,&quot;os_family&quot;:&quot;Mac OS&quot;,&quot;os_version&quot;:&quot;10.14.4&quot;,&quot;device_type&quot;:1,&quot;pageNumber&quot;:1,&quot;node_id&quot;:&quot;xmrij-432151666&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">blockstat_post</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://ssp.rambler.ru/userip" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">userip</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://securepubads.g.doubleclick.net/gampad/ads?gdfp_req=1&amp;pvsid=2524596675452859&amp;correlator=495333634261311&amp;output=ldjh&amp;impl=fifs&amp;eid=31060331%2C21069730%2C31060367&amp;vrg=2021031001&amp;ptt=17&amp;sc=1&amp;sfv=1-0-37&amp;ecs=20210316&amp;iu_parts=21758191093%2Crambler.ru%2CBillboard%2CPMP&amp;enc_prev_ius=%2F0%2F1%2F%2F2%2F%2F3&amp;prev_iu_szs=970x250%7C1x1&amp;prev_scp=sspimpressionid%3D6050d-a91c4-7be68%26sspnext%3D1%26segments%3D%252C%252C%252C&amp;cookie_enabled=1&amp;bc=31&amp;abxe=1&amp;lmt=1615898912&amp;dt=1615898912866&amp;dlt=1615898908816&amp;idt=4016&amp;frm=20&amp;biw=1290&amp;bih=690&amp;oid=2&amp;adxs=25&amp;adys=140&amp;adks=2744344116&amp;ucis=1&amp;ifi=1&amp;u_tz=180&amp;u_his=2&amp;u_java=false&amp;u_h=900&amp;u_w=1440&amp;u_ah=801&amp;u_aw=1440&amp;u_cd=24&amp;u_nplug=3&amp;u_nmime=4&amp;u_sd=2&amp;flash=0&amp;url=https%3A%2F%2Fwww.rambler.ru%2F&amp;vis=1&amp;dmc=8&amp;scr_x=0&amp;scr_y=0&amp;psz=1240x250&amp;msz=1240x250&amp;ga_vid=1878042504.1615898838&amp;ga_sid=1615898913&amp;ga_hid=4506201&amp;ga_fc=false&amp;fws=0&amp;ohw=0&amp;uach=WyJNYWMgT1MgWCIsIjEwXzE0XzQiLCJ4ODYiLCIiLCI4OC4wLjQzMjQuMTkyIixbXV0." enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="bih" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bih</stringProp>
                  <stringProp name="Argument.value">690</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sfv" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sfv</stringProp>
                  <stringProp name="Argument.value">1-0-37</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="iu_parts" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">iu_parts</stringProp>
                  <stringProp name="Argument.value">21758191093,rambler.ru,Billboard,PMP</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_ah" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_ah</stringProp>
                  <stringProp name="Argument.value">801</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ucis" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ucis</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="output" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">output</stringProp>
                  <stringProp name="Argument.value">ldjh</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dt</stringProp>
                  <stringProp name="Argument.value">1615898912866</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="impl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">impl</stringProp>
                  <stringProp name="Argument.value">fifs</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="biw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">biw</stringProp>
                  <stringProp name="Argument.value">1290</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lmt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lmt</stringProp>
                  <stringProp name="Argument.value">1615898912</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ecs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ecs</stringProp>
                  <stringProp name="Argument.value">20210316</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="msz" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">msz</stringProp>
                  <stringProp name="Argument.value">1240x250</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="cookie_enabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">cookie_enabled</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="scr_x" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scr_x</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_fc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_fc</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="prev_scp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prev_scp</stringProp>
                  <stringProp name="Argument.value">sspimpressionid=6050d-a91c4-7be68&amp;sspnext=1&amp;segments=%2C%2C%2C</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_h" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_h</stringProp>
                  <stringProp name="Argument.value">900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="scr_y" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scr_y</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="frm" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">frm</stringProp>
                  <stringProp name="Argument.value">20</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vis" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">vis</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="prev_iu_szs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">prev_iu_szs</stringProp>
                  <stringProp name="Argument.value">970x250|1x1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_tz" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_tz</stringProp>
                  <stringProp name="Argument.value">180</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vrg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">vrg</stringProp>
                  <stringProp name="Argument.value">2021031001</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_nplug" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_nplug</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="gdfp_req" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">gdfp_req</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_w" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_w</stringProp>
                  <stringProp name="Argument.value">1440</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_sid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_sid</stringProp>
                  <stringProp name="Argument.value">1615898913</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="enc_prev_ius" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">enc_prev_ius</stringProp>
                  <stringProp name="Argument.value">/0/1//2//3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="idt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">idt</stringProp>
                  <stringProp name="Argument.value">4016</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_java" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_java</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="flash" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">flash</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ohw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ohw</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="eid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eid</stringProp>
                  <stringProp name="Argument.value">31060331,21069730,31060367</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">bc</stringProp>
                  <stringProp name="Argument.value">31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fws" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fws</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="uach" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">uach</stringProp>
                  <stringProp name="Argument.value">WyJNYWMgT1MgWCIsIjEwXzE0XzQiLCJ4ODYiLCIiLCI4OC4wLjQzMjQuMTkyIixbXV0.</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="oid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">oid</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_nmime" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_nmime</stringProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">sc</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="adys" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">adys</stringProp>
                  <stringProp name="Argument.value">140</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_his" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_his</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="psz" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">psz</stringProp>
                  <stringProp name="Argument.value">1240x250</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_hid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_hid</stringProp>
                  <stringProp name="Argument.value">4506201</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_cd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_cd</stringProp>
                  <stringProp name="Argument.value">24</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="abxe" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">abxe</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="adks" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">adks</stringProp>
                  <stringProp name="Argument.value">2744344116</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pvsid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pvsid</stringProp>
                  <stringProp name="Argument.value">2524596675452859</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ga_vid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ga_vid</stringProp>
                  <stringProp name="Argument.value">1878042504.1615898838</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dlt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dlt</stringProp>
                  <stringProp name="Argument.value">1615898908816</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ifi" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ifi</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_sd" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_sd</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.rambler.ru/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="correlator" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">correlator</stringProp>
                  <stringProp name="Argument.value">495333634261311</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ptt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ptt</stringProp>
                  <stringProp name="Argument.value">17</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="adxs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">adxs</stringProp>
                  <stringProp name="Argument.value">25</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="u_aw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">u_aw</stringProp>
                  <stringProp name="Argument.value">1440</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dmc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">dmc</stringProp>
                  <stringProp name="Argument.value">8</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_8}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">gampad/ads</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.rambler.ru/api/v4/desktop/personalized/?limit=101&amp;item_excluded_ids=46015570%2C46015229%2C46015739%2C46014548%2C46015267%2C46013806%2C46015466%2C46014122%2C46014529%2C46015034%2C46015369%2C46014305%2C46013748%2C46013122%2C46015607%2C46011555%2C46014343%2C46011920%2C46014593%2C46014611%2C46011421%2C46013708%2C46013234%2C46013414%2C46014210%2C46013962%2C46014157%2C46010145%2C46014229&amp;ruid=00000BBC6050A8D468781D955F72B401&amp;xuid=vAsAANSoUGCVHXhoAbRyXwB%3D" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="xuid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">xuid</stringProp>
                  <stringProp name="Argument.value">vAsAANSoUGCVHXhoAbRyXwB=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                  <stringProp name="Argument.value">101</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ruid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ruid</stringProp>
                  <stringProp name="Argument.value">00000BBC6050A8D468781D955F72B401</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="item_excluded_ids" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">item_excluded_ids</stringProp>
                  <stringProp name="Argument.value">46015570,46015229,46015739,46014548,46015267,46013806,46015466,46014122,46014529,46015034,46015369,46014305,46013748,46013122,46015607,46011555,46014343,46011920,46014593,46014611,46011421,46013708,46013234,46013414,46014210,46013962,46014157,46010145,46014229</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v4/desktop/personalized/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Pragma" elementType="Header">
                  <stringProp name="Header.name">Pragma</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Cache-control" elementType="Header">
                  <stringProp name="Header.name">Cache-control</stringProp>
                  <stringProp name="Header.value">no-cache</stringProp>
                </elementProp>
                <elementProp name="Expires" elementType="Header">
                  <stringProp name="Header.name">Expires</stringProp>
                  <stringProp name="Header.value">0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://img02.ssp.rambler.ru/file.jsp?url=dtIj0m3q8nreuFCviiSgQGnM8B0pON62uhpPc4vA*FJZCezWyPfD9KtwpYeTKIOA4wjfzC2CyIrr55lA0Rfu2IVlJA5*kkEBe9Tiv8WOGzJ0onv49j0g79K7Cium9AT00w5R0w*vdVhU*uc5BL*sAybEorPm4O0qFcUKDPG0sFcF4rRfqp1PnkOl-RVgSxPvG5jz3rkVQ4BavOWNhZN5IrBoq-ZCO0iI*Jhj1GJKlm7QzcXDiOeb1qVpUw66go5zycolCPgbxA-3zVpT7eNnOWctCqHoNjbPqlDk36k8QaWvEI5UBsvsWe3i6hjAx-hFN3rkAaWRl*30P31aEyDOTLPaMpJBljaFmJ1e49bGXdVJaIv*OXUl62KrnCT6kJkHpP8wRLMKvGFtMJ1TjpLJyV6M9KOEGX1EtqDQ-aPSCUWhJHWxPQFhUYV2gNO*WDGqFzW3s10XCT1ddazRBSitKlLvoWxWqwHv*SfxYS8-cLLkmFw1PSgHEwg45bejNusHHopNkLO-bBYiiT5kr2Y2vWhNlrqihIQm8RFiqts4U8EPOhoW6mHOBa2VnHUXhZd3Ua291Iu7n6pCBi6Oxdoarf5GcjT0ybMawNNt4vqkvj791I5Tf*6MXU444-EA3vrRKte8pek3ax-NL6pyzJvvxQOaNyqio7reMCbwu2yfrc1yJmyDs9Lnh1EUaViNST7VUiSR6ipWPjnLOWmCbNz5t4VX4wBj68*RD7*Ht*uVULb8eqSTCGizaiQlajiqsLiAgPa4Vasc943zS1JftfO*ZpfDfln7eyvl6SRFCXtZ9fRhyj4LMhDLYyKXOEYWhSvu5U74HyCx9PIQaRDI4zso*sQfTUdjlUMjE44Si4weSrJzKzoAfIpRRKOU20zoVgrLCtg1ADzjqCGdMsc*SZ3U2ko5EFKjnkXhRjbWghC1MwZzAz4S4n-7TiKlSwsU*9fmQtNvZJXKPxYiKx*eNIY9*6aSaZ-KxnkKyRT*-ScGyQJ9WbF3DmzReYhwdsMDvg8jz5T612R7AZlNczLXr2CzJQOxBU*7ne5xz7KmtoqXGp2cuotmK0oZ8Ao-wFHvriCIChoZBw80l-6-6XQsJiFjTyDI9i7Ckj49k3MW4DhLLr0o1d1kPKPlWjUqccrygnCB335GpAuHXuZOfErMlb5SYQlaHj0H9kugMDX8jxVYU9PGrreyMJwKlXLjgIfwNZXWyl3BXbdoxqt4JQsHSoCvA3NIS0d4M133JAVwQeJKCl1RY4vRKagZUleJZ3rwwnggSguFK7tr6i8mLSEM-U6GyFgg8T8y0f65AirX1ngdoTvmWB83Bhz0SnXc*PJQ1nWAL0gYkUilMI0Fmd7wR*559qjToG5AWJfQoYcmmSIZfNzu*ZbgaX4USw4acW*X69p1vSsxVqHpyV0IMxmM6iXnKCVFbgRzXKfKJvMoagjaxcoJuolGZfe4LfHjJ3NM8IIYCSubG5aBK-5rkH0cKO9xvlMtERHHs2X8iQpeUBoHz3Z4G6mmf-CHG4oYIZ7GP4DtzGULM2HxCkUFWqxowmZzRVcKbPMZ2lig6pBTG5ym4lhFkyotNquN3cGtn7PbX5uWUZydGownnNBqP-0YvRqWXond7svDF79l0TO2Nc51nxkCAAAAuty8CgAAAAA&amp;eurl%5B%5D=a6KYIUhdW83iPSraXnVhBR52e-mQbifTn3HIKtb*dvKjI4r0HvGZMHVAzNzQ*cj5HK18qXhTAiWfGNI-kqeL6-ikZqLvDR5u6iDziLYZB5kY6jpJJN2EmlK7AQso2vQCAgAAALrcvAoAAAAA&amp;seq=1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="eurl[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eurl[]</stringProp>
                  <stringProp name="Argument.value">a6KYIUhdW83iPSraXnVhBR52e-mQbifTn3HIKtb*dvKjI4r0HvGZMHVAzNzQ*cj5HK18qXhTAiWfGNI-kqeL6-ikZqLvDR5u6iDziLYZB5kY6jpJJN2EmlK7AQso2vQCAgAAALrcvAoAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">dtIj0m3q8nreuFCviiSgQGnM8B0pON62uhpPc4vA*FJZCezWyPfD9KtwpYeTKIOA4wjfzC2CyIrr55lA0Rfu2IVlJA5*kkEBe9Tiv8WOGzJ0onv49j0g79K7Cium9AT00w5R0w*vdVhU*uc5BL*sAybEorPm4O0qFcUKDPG0sFcF4rRfqp1PnkOl-RVgSxPvG5jz3rkVQ4BavOWNhZN5IrBoq-ZCO0iI*Jhj1GJKlm7QzcXDiOeb1qVpUw66go5zycolCPgbxA-3zVpT7eNnOWctCqHoNjbPqlDk36k8QaWvEI5UBsvsWe3i6hjAx-hFN3rkAaWRl*30P31aEyDOTLPaMpJBljaFmJ1e49bGXdVJaIv*OXUl62KrnCT6kJkHpP8wRLMKvGFtMJ1TjpLJyV6M9KOEGX1EtqDQ-aPSCUWhJHWxPQFhUYV2gNO*WDGqFzW3s10XCT1ddazRBSitKlLvoWxWqwHv*SfxYS8-cLLkmFw1PSgHEwg45bejNusHHopNkLO-bBYiiT5kr2Y2vWhNlrqihIQm8RFiqts4U8EPOhoW6mHOBa2VnHUXhZd3Ua291Iu7n6pCBi6Oxdoarf5GcjT0ybMawNNt4vqkvj791I5Tf*6MXU444-EA3vrRKte8pek3ax-NL6pyzJvvxQOaNyqio7reMCbwu2yfrc1yJmyDs9Lnh1EUaViNST7VUiSR6ipWPjnLOWmCbNz5t4VX4wBj68*RD7*Ht*uVULb8eqSTCGizaiQlajiqsLiAgPa4Vasc943zS1JftfO*ZpfDfln7eyvl6SRFCXtZ9fRhyj4LMhDLYyKXOEYWhSvu5U74HyCx9PIQaRDI4zso*sQfTUdjlUMjE44Si4weSrJzKzoAfIpRRKOU20zoVgrLCtg1ADzjqCGdMsc*SZ3U2ko5EFKjnkXhRjbWghC1MwZzAz4S4n-7TiKlSwsU*9fmQtNvZJXKPxYiKx*eNIY9*6aSaZ-KxnkKyRT*-ScGyQJ9WbF3DmzReYhwdsMDvg8jz5T612R7AZlNczLXr2CzJQOxBU*7ne5xz7KmtoqXGp2cuotmK0oZ8Ao-wFHvriCIChoZBw80l-6-6XQsJiFjTyDI9i7Ckj49k3MW4DhLLr0o1d1kPKPlWjUqccrygnCB335GpAuHXuZOfErMlb5SYQlaHj0H9kugMDX8jxVYU9PGrreyMJwKlXLjgIfwNZXWyl3BXbdoxqt4JQsHSoCvA3NIS0d4M133JAVwQeJKCl1RY4vRKagZUleJZ3rwwnggSguFK7tr6i8mLSEM-U6GyFgg8T8y0f65AirX1ngdoTvmWB83Bhz0SnXc*PJQ1nWAL0gYkUilMI0Fmd7wR*559qjToG5AWJfQoYcmmSIZfNzu*ZbgaX4USw4acW*X69p1vSsxVqHpyV0IMxmM6iXnKCVFbgRzXKfKJvMoagjaxcoJuolGZfe4LfHjJ3NM8IIYCSubG5aBK-5rkH0cKO9xvlMtERHHs2X8iQpeUBoHz3Z4G6mmf-CHG4oYIZ7GP4DtzGULM2HxCkUFWqxowmZzRVcKbPMZ2lig6pBTG5ym4lhFkyotNquN3cGtn7PbX5uWUZydGownnNBqP-0YvRqWXond7svDF79l0TO2Nc51nxkCAAAAuty8CgAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="seq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">seq</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">file.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://id.rambler.ru/jsonrpc" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;method&quot;:&quot;Rambler::Id::get_profile_info&quot;,&quot;params&quot;:[{&quot;get_chain_id&quot;:1,&quot;get_accounts_by_provider&quot;:&quot;uniq.lp.love.passport.rambler.ru&quot;}],&quot;rpc&quot;:&quot;2.0&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">jsonrpc</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://id.rambler.ru/jsonrpc" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;method&quot;:&quot;Rambler::Id::get_profile_info&quot;,&quot;params&quot;:[{&quot;get_chain_id&quot;:0,&quot;get_accounts_by_provider&quot;:&quot;uniq.lp.love.passport.rambler.ru&quot;}],&quot;rpc&quot;:&quot;2.0&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">jsonrpc</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.rambler.ru/api/v4/header/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v4/header/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.rambler.ru/location/autodetect" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">location/autodetect</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.rambler.ru/location/current" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">location/current</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Cookies" elementType="Header">
                  <stringProp name="Header.name">Cookies</stringProp>
                  <stringProp name="Header.value">split-v2=3; ruid=vAsAANSoUGCVHXhoAbRyXwB=; c8980c62834072c480df58741f1fd039393df9aaea5446dbb1dd2187750209fe_2=vAsAANSoUGCVHXhoAbRyXwB%3D; _ga=GA1.2.1878042504.1615898838; _gid=GA1.2.194658056.1615898838; dvr=gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA:1615898838; r_id_split=3; top100_id=t1.29811.1088768907.1615898839194; last_visit=1615888039230::1615898839230; rchainid=%7B%22message%22%3A%22need%20session%22%2C%22code%22%3A-4000%2C%22details%22%3A%7B%22method%22%3A%22Rambler%3A%3AId%3A%3AAux%3A%3Aget_rsidx%22%2C%22requestId%22%3A%22ridkmc0g3yo0wvi37sju%22%7D%7D; proto_uid=1CIAANeoUGDBHgk2AbFnjAB=; sspjs_8.1.0_af_lpdid=%7B%22DATE%22%3A1615898839628%2C%22ID%22%3A%2252616%3A14798%22%7D; rambler_3rdparty_v2=; lastgeoip=178.176.175.135; detect_count=0; declinesbc=1; uuts=4vrJyNg3xCXm90ZDP5iwnSFWSx-Qb*GG; _gat=1; lvr=1615898912; sts=0.1615898840.1.1615898912.2.1615898840.3.1615898840.4.1615898840; __gads=ID=a32f928a00a4aba2-22dda07cccba0059:T=1615898912:S=ALNI_MaNYCoLV3BDCFGqPp0K1k6OVJxs1Q</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://id.rambler.ru/jsonrpc" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;method&quot;:&quot;Rambler::Id::Aux::get_rsidx&quot;,&quot;params&quot;:[{}],&quot;rpc&quot;:&quot;2.0&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">jsonrpc</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Client-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-Client-Request-Id</stringProp>
                  <stringProp name="Header.value">ridkmc0hpark6exkk8xb</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://id.rambler.ru/jsonrpc" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;method&quot;:&quot;Rambler::Id::Aux::get_rsidx&quot;,&quot;params&quot;:[{}],&quot;rpc&quot;:&quot;2.0&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">jsonrpc</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Client-Request-Id" elementType="Header">
                  <stringProp name="Header.name">X-Client-Request-Id</stringProp>
                  <stringProp name="Header.value">ridkmc0hpas1py6pru1d</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://id.rambler.ru/api/v3/session/getRsidx" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;ridkmc0hpgetuhifzyp8&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v3/session/getRsidx</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://ssp.rambler.ru/userip" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">userip</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://id.rambler.ru/jsonrpc" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;rpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;Rambler::Id::get_profile_info&quot;,&quot;params&quot;:[{&quot;get_accounts_by_provider&quot;:&quot;uniq.passport.rambler.ru&quot;,&quot;get_chain_id&quot;:true}]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">jsonrpc</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.rambler.ru/api/v4/doodles/desktop?project=head" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="project" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">project</stringProp>
                  <stringProp name="Argument.value">head</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v4/doodles/desktop</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="x-geo" elementType="Header">
                  <stringProp name="Header.name">x-geo</stringProp>
                  <stringProp name="Header.value">54119200</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://ssp.rambler.ru/context.jsp?wl=rambler&amp;json=1&amp;pad_id=432151618&amp;first=1&amp;block_id=468710618&amp;screenw=1440&amp;screenh=900&amp;winw=1290&amp;winh=690&amp;rq=6&amp;rq_sess=baefc5b4-ba31-4e88-9887-2407075685ac&amp;secure=1&amp;vcapirs=8_1_0&amp;jparams=%7B%22puid6%22%3A%22HEAD_MAIN%22%2C%22puid44%22%3A%22RC1%22%2C%22puid61%22%3A%22948%22%2C%22puid29%22%3A%222%22%2C%22puid30%22%3A%22sleet%22%2C%22pageNumber%22%3A%221%22%2C%22puid42%22%3A%229.7%22%2C%22pli%22%3A%22a%22%2C%22plp%22%3A%22a%22%2C%22pop%22%3A%22a%22%7D&amp;misc=5&amp;rq_type=0&amp;grab=eyJncmFiX3ZlcnNpb24iOiA0fQp4nJVay27d1hWd5yv4AXaMxEUfhmGgaCcddVJk0FnaGEiAtAVSA0Vn92FJdqRYsmU0hi3bke08gKItLy-vRPE-BPgLyF_Il3SvtfYhz6GUABnIvpeXPI_9WHvtdXjz4zt_-fTWOzc_vv3hR7du3vnkzqe3bzVfNXmzambNslm0o2vNutk0RbNpx-2kqa5kzbl93rHPedZU_NZU7bips-9HjzN7btGUTdWcNet2tznT3SPc3SxvZOlYmc2Ej2O7v-JgKxtq1ORXsvYLzN7U7cS-b-yxdZO3-9HcWkczt7-SD9hjzamNzcfs5on9v2z3uIwFB6_t3lWzaqc2WMV7tu1_Ds57bB22XxvCttPuvps1z5PF4mefb42l-JWzdsdGGt-8JuPdvEZTvnPzT3_76J8w7PVbNo6Z6rVtBmusbD5bz7l9qbhgMwxWZ_-09-xv0u5lzQk-YAOYIGsec5UzzGNz5tj6whYBu51xa3MOfQJT4Lo9a-PaUq77Ch7ZAEsu3aaX5bCADYdYZs0r7nxhC4CRinaqe2rc3k61plONbpds-Yd8tjRbrtrdeKKseWru3oWZ8UhuD2HoE98m1zmzh82F7YP2vkyKuMhhTttXu23_L23gk2bW7iZ2s69aNJbd7nMt62Sfx3ZlBWO1e_hdZkZAYvMn2Cush2XxB_hVmyvgy4zj0d-cMgqMDZfFB6LpvqaNapsBITPJ3v7bXMU1YRVvl3iy5nJ2sH-7B3HTnF7FEtwNNBHtaj-aA3JLHW68yBhtSzkkmvVLD4w1R7cQuIGJn8IxeIjhBQPXDAlbs-a1S51zmvztMhrxpQcjFl7DSxOllqUVkm2TmTNtCwstRgnWZ1zFIA7zIIjt8qa9S9NzX9FUh75wGwMJdmCh94IeMX8VCsZNM7MJGdMb-8V2A9vRoTbDlO7IGOQbgQOsFSFJNBuveuKvaWmsbMQ5bMX3MXL2h398cufO7c8yIh6DnsMWFnjaNjdySmzDFtvtaIYX9pSPyeCxEDxqnhjSvVEIAWNofXPqiLBUBYfUQ_wLgWHePLYAtbwLSJV9kPjr2Bayo1TGrs4JwNiKPhrqrZBULzkEUzh6-Mh2MPaBNwqYPAARkYXbhQ8tDBkJdcZYgg-0G654ZUuc0LL2p2ioB8mICYDBNVZzzJHnQrRDM8UIcdjek_cjXMAyYAZmYZUFjM-4rhopDNCBu5A2yZxMwNz2ssaMLD1INNsIXJsxHcZMjY1goEY-AALgksTGhmRHdKnhHldXKK-2FdQCbeYvrSnU2MvaBzYJ4iBnAtB7nqlMKcsP7nGFzbMmeYHLWXhG5rJxYsVXApSA0Wv8q62NgQIMO6QF3TPpYIVAyfhm1bCFjbP2Li2W-wLiRDnysl13kGkjBvBUVhJZ4jh2zwczw7i0TOVlWjner_Q3v__gd7-9-t6vYiOb8UM0LmnDvSsBNEPgKNKZkArayhGcW5sEVzwUuiPYs5BF544aRkQMjB2Kt2HBdpK42mAOBYfbqUNoYr83smEY98Fqk9vIjn16TpVpFI39FEHGgo4Awn1rDmAhnXXbniCcvQTmwawzzWp42n9lgpjPD7rgip343CwOjNomhm0pEpakEiHZESd2YSdYrfCbLOx2evcVzam5xVOfdeMAQGxTzlifStbz9YBiHDXHw3IN-kT-N_XqS3Qy14iEqbokbGcFRwUK0WcNjMLMzdMUfSLA4LJ_OahR2OyKq16GmPSUKZj5277IX__9zmcf_vH2X2__-cNo8NcwUs8i7fM2HDTllpYKNm4mGtiZQ0VkrFTkjXuoKoYockiPgZKbKFg5zzLP3Qn_KrpnBRBc8PI-4vo17C8meEDOPGF4YU1LwFim8GX092agt4-b75qDpEIuAiRkzTMOVXT5xoAsadNc1EkQAF-KtOC-RV-_lx5DQEo8C1sR7zc0C0r_xHl3lVQKwMqOUgUfP49QIb_S4wlZ5SEXU6v-FRYoc-waOGWRSlPWjBdnvJt4t4DXQJtIJOymEtvPPOsZ_zRSoMA50cZsuhDanjolHqlnMeuWwfohmfZACWC_nsR_P_pmiAqyU8-6-BDGYiF1IocBy3aL_-5jmSWzad59gEUKD0KfrvpR_DnwzmpMB5aIi4es7lPwxyuqSYFbrbwVCAEeOJ9X5HG3Y8_Vs4ypRevQvOnGr2dcxX32kd086tBYPvCTkOMcWU9arkWsVB1ZHfhIwQ5i4gC1IsSYoYfsT10Sl5eTutjiHtDZJcnA2Kmsx4V7m3XUy36J6RXOFmZAxi31uSf8yQJTYc-ais61ZtqiICaF3KJm5OjMXjZnX8ykZXKTWU0ZjqPQqsAKfc_j-6CZZ1zqwpO64iOx4__l15jJXcinZI-Rj90BAXbCvuHdM4fvYe-5SGYANBCbKueN8N1dZCOJ4gOrnt-yf7CUntLeE8ZMybxbeiFcDVmXOHvh4W_BX_VlvqQAYKhbM_zPuT9WiJm3MOZUemc9IIbPMV4ZO3dDw0_Yuuy9hTyBvho0bLvdHQToCiE29nXk5NY2bU5UKgYzPeWCc5hbO50rfGwr3hTsw_prqgdqNaVUTNsHSqhTlpvKv0Y99bvJRP9TG0RfRukD_3E7tZL_oeAXlj9ytWahXtEsJsQELXKyLNZXdCzP29YiRbCfWDeC3LHuJYSfUiCOaKJdq5C09iVFgjDQfo5GzZiVj0wSVMrHmOSS-veI-9xBaEWpoUjzjcStTs6KQ2TrCP3U20WoQkTqpXcZnhF8iAHL2-J9eXYcORLh5rkansItIub9SmqFBQn3sepaVEKBJ2ySnAeMzrugAOYfC57aPWPrNyvZOkO2uygnta4c5CPbdW6EQfbI7Pe669A1CnkLDI1g6gUG3NBTQeNO7RZ1iie4lRxIysIExTSNrRdwbjx62GTttY_uXSj2ClE-Wu9c7Qq1GJcHK1sqnz0V9SvlxoR97YJIHHvHtoljuHLG5s3kllDMLMGNlRK0NoFK2-4eetosqIZeH3aUAzCNgVfMmDS_Smj1wiUIBEetas8r6jebJ067FiEa0jC2Nc34kU362Js_A_eLAhCzqwzeXHv5QUT3Msszq50ladJSX_dpUU2dUiHpN7MkmJYsqDbwN0p1Ic4hS2fObVQXcvuKK7eqU6Ljp4hqBxiZQQAjMYpWAiu4pOP8TiVPTvbCr1bSNQ6C3bnYXUGey7Z_HMLCWwLy8Gd8unYDeJ-SD4UEddNoxjH0SxeZ_f5ajVSAsLHCSl_nHacjdtHjMnHl_llHHV-auK8DbXN2Jkl4oDhZ7rtsGKhmwfJZhY7JzcIGFYXNSyFiu_0C-Zsm7n8sg-5KtnfB_hc_u-pF1tCRpCdih3kfMSDwZKdkfBZ_3ko5E0HsTry3W2WedjK9xetagX_i5HyvfTAo_JWG29VRAcJK3L9woK5QLW3tkMtmoU0TIOZseqHZjRzhYgs6Hw6RyAwu5VpcuFhnrho9XPOWumNn2NS8d5eQbeMZnA8lb0sVuEIKSKWIBHsJFmMliSZ-Yws-zFzdV2DZ44D7SscGQQAfkWmze3SeFVwgjZyqJELlXLSoqa--Hwe6_X7ErIZksQBdQgrnJCJwsnblm72syXO2EgFtOHjIs_cV6zJ0BZi0Qp8G33PpaQgw8igJJguFhBrCEzHQqXi-9xATOW3Nva29SSBOL2lfV_ZSIH9OUCx4fCHFKyI4y3ABYLeJayKdOwpnKk6sRA1F5ArE15s4pdipnUuzAuQGZf80rhqFNxByJVyF20Dvd9opPDqQZS5Vy6_juTkbwXPjOFt4rmj6k6L8Ys9WcEXmy32uh2Pr0MftOmeMLyR-wPWJFP1Y8YK7BmGupWAea3oZ3BmfZr_gCe_5PwoeMqfzCPJrWsfmjYmWyiiYCJvLC8dClXPGwMChN92XNXXEaVdqlYJRqkt1QsugC_haHamCCTW4ZirMGDNLoYuUpDlbQau531KaKwg6rm9sul3OWFZTMw1KuBSjgj0-xXqq7S6C5TeyoPK587xpK3TIpVKo3nop3V3lWkhI8biW873t6A94lF6n2MlwSVSSgfnDjmpBMRJLwqmXWnkcX9wXxw-D--HtmjZYudh3ihRnM8mSmFAZP8BgI8iR9wcaefbDmvpP1s2f0bcbCQEqBnOHkrw_tV6J4KhHmThpyLvDyMw1RTg2Pkx9pbKCcN3XEXSqbxJszgiKoVsXvQ26ETaoo3wxlJggvGBJ2PKD95kPXN_ojmEpRAlhCDylI1tfpHqZRjEpaslfXQhUNi2CtpyUpePmIac-Mob0WCiy6zpFJ-2snbrOvUOR3BEpBAn-b_q0qfxkct03sKdyQDjPKwNtWHjtO-tFktwxC0VwksTWgA7_12UbUti5CzdrppoOTtNejuzWJQNjlsCiy-Sqrs5filM412jSs_nu2GDZPiRc-jkw3Cojln0VSsPgZVQldzMtUVDOkMPelsb5GUGEWJtekjZ5j2yBX0gchmcYqteLBBdfBqEhZ1_NI0rvZvNOiPmKRbq6SmnyVF9cHJP4num1i7D9isJBOC3fpUIHvSA5q_1SbDmmd12AxQSBI0gSnDhNLv3od6KFMNPjQhZEWcmQlEQA87XXpqmTa5atC2Jjf8w-kZgZDmEpZKy89u-F0lS5GJ3Sn0P3RTlg-ReLto8epCOxY_QnC28TNj0vEunyE9W0vfDygKgZHpTmqkAToR9A8J7moSqm7p_EB5bJgwoHqP15uqkjN5VWtJ_5DLULF5h-QuSYqp0m3XrEhZUs2YisRf-mhZ9h5F1rl2zqyx-Q4lMTIrY4t5JzKe1a4mZ0aJd3faSOnxMG-YI5Nxc-kxuwHe1poEJ8DGnC33hg2JfhwGXNIrJka-lOS5GEt3qV26SvvCz0ugg8_AA9QUhcW9WTG6L5AvgRFYG16x_u204SEWdY-D1Wp9OuV_1OKkfkVAWYDefo0ZdUEwx6L4qt4RCsEgVt-pMYLrWm6lbzaCumHH7coVcD9OoRAAGkz-6dBRDWGyE6_5hG7yG9dxVzx2RZNWGVBW1IOmDaDCShEGJyRWYQzjwn8i9PDFTYNp5ohbc1l74oozeOcIZ36QnFJvRtZQjyFYPEUbk7fBy8unPpQRRJzkoLdtBLOl2iugCklEIsr0eDxVJUJx4VjqMRo0p6d3e3kIsFnJVDbysxf8M7EukrbUFMKkKgPW361_ucQCtxgA_3Oym1O8zqMqfSiU7UWIUzJWdqP3J4fDH0CpCB14b_B3ChVpC-A0ddhXklMJGIYwGesLO7spne5fEalXJ0MTWJBrOYTHsfeBpT6PiFmlVHHQJpZBuW7CUxvPcwUoFdIRtSkHt28zSjCOBWuwwPLtH3UKICW3L47FRpUKqtSG4ayPGXvXX0Ohx2q1vhx8c6JCcYn0GCo_rk5qkT6DzuwxyhVIai-UPHtAm1eRNhhHdVY6eBXOlKrzcc8rhk2XVlvvnzgE4MCG9UOyZA2ywS6KE2IBGVRzprdMnUqJ6JRLuIy4QbkXlWimsdpXbCvx-0Tdhujy8Bo2fU5KyySqRd690D16Da8O5Z3zt1FaKvsyGAiLVD5OhOqfszrLwnDnlHHKTs1OoPRRzD6z7-gkodxO7BW0Z8hTOcvP4QMjHVSmES6YrNx-PMQdd37EKTKEYfHHn4Gp_j06xTle4Ox8mNXAIavKfryIDg-WIo_pRsUafdQWTVHRhHL1OyJUtOGjrR5Zq_lXxNr33_H3F7ysM%3D&amp;browser_family=Chrome&amp;browser_version=88.0.4324.192&amp;os_family=Mac%20OS&amp;os_version=10.14.4&amp;device_type=1&amp;top=1445&amp;left=25&amp;fpruid=pA8AAN9Js1fMQNL2ARGPuAA%3D&amp;lruid=pQ8AAB%2BpUGB8aBvpASWqDQA%3D&amp;callback=Begun_Autocontext_saveFeed1&amp;url=https%3A%2F%2Fwww.rambler.ru%2F" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="os_family" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">os_family</stringProp>
                  <stringProp name="Argument.value">Mac OS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fpruid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fpruid</stringProp>
                  <stringProp name="Argument.value">pA8AAN9Js1fMQNL2ARGPuAA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="device_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">device_type</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="secure" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">secure</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="jparams" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jparams</stringProp>
                  <stringProp name="Argument.value">{&quot;puid6&quot;:&quot;HEAD_MAIN&quot;,&quot;puid44&quot;:&quot;RC1&quot;,&quot;puid61&quot;:&quot;948&quot;,&quot;puid29&quot;:&quot;2&quot;,&quot;puid30&quot;:&quot;sleet&quot;,&quot;pageNumber&quot;:&quot;1&quot;,&quot;puid42&quot;:&quot;9.7&quot;,&quot;pli&quot;:&quot;a&quot;,&quot;plp&quot;:&quot;a&quot;,&quot;pop&quot;:&quot;a&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="vcapirs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">vcapirs</stringProp>
                  <stringProp name="Argument.value">8_1_0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="top" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">top</stringProp>
                  <stringProp name="Argument.value">1445</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="wl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">wl</stringProp>
                  <stringProp name="Argument.value">rambler</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="json" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">json</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="screenw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">screenw</stringProp>
                  <stringProp name="Argument.value">1440</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="browser_version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">browser_version</stringProp>
                  <stringProp name="Argument.value">88.0.4324.192</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="misc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">misc</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pad_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pad_id</stringProp>
                  <stringProp name="Argument.value">432151618</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="os_version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">os_version</stringProp>
                  <stringProp name="Argument.value">10.14.4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="winw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">winw</stringProp>
                  <stringProp name="Argument.value">1290</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="lruid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lruid</stringProp>
                  <stringProp name="Argument.value">pQ8AAB+pUGB8aBvpASWqDQA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="block_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">block_id</stringProp>
                  <stringProp name="Argument.value">468710618</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="screenh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">screenh</stringProp>
                  <stringProp name="Argument.value">900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.rambler.ru/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rq_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rq_type</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="left" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">left</stringProp>
                  <stringProp name="Argument.value">25</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rq_sess" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rq_sess</stringProp>
                  <stringProp name="Argument.value">baefc5b4-ba31-4e88-9887-2407075685ac</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="callback" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">callback</stringProp>
                  <stringProp name="Argument.value">Begun_Autocontext_saveFeed1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="browser_family" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">browser_family</stringProp>
                  <stringProp name="Argument.value">Chrome</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="winh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">winh</stringProp>
                  <stringProp name="Argument.value">690</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="grab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">grab</stringProp>
                  <stringProp name="Argument.value">eyJncmFiX3ZlcnNpb24iOiA0fQp4nJVay27d1hWd5yv4AXaMxEUfhmGgaCcddVJk0FnaGEiAtAVSA0Vn92FJdqRYsmU0hi3bke08gKItLy-vRPE-BPgLyF_Il3SvtfYhz6GUABnIvpeXPI_9WHvtdXjz4zt_-fTWOzc_vv3hR7du3vnkzqe3bzVfNXmzambNslm0o2vNutk0RbNpx-2kqa5kzbl93rHPedZU_NZU7bips-9HjzN7btGUTdWcNet2tznT3SPc3SxvZOlYmc2Ej2O7v-JgKxtq1ORXsvYLzN7U7cS-b-yxdZO3-9HcWkczt7-SD9hjzamNzcfs5on9v2z3uIwFB6_t3lWzaqc2WMV7tu1_Ds57bB22XxvCttPuvps1z5PF4mefb42l-JWzdsdGGt-8JuPdvEZTvnPzT3_76J8w7PVbNo6Z6rVtBmusbD5bz7l9qbhgMwxWZ_-09-xv0u5lzQk-YAOYIGsec5UzzGNz5tj6whYBu51xa3MOfQJT4Lo9a-PaUq77Ch7ZAEsu3aaX5bCADYdYZs0r7nxhC4CRinaqe2rc3k61plONbpds-Yd8tjRbrtrdeKKseWru3oWZ8UhuD2HoE98m1zmzh82F7YP2vkyKuMhhTttXu23_L23gk2bW7iZ2s69aNJbd7nMt62Sfx3ZlBWO1e_hdZkZAYvMn2Cush2XxB_hVmyvgy4zj0d-cMgqMDZfFB6LpvqaNapsBITPJ3v7bXMU1YRVvl3iy5nJ2sH-7B3HTnF7FEtwNNBHtaj-aA3JLHW68yBhtSzkkmvVLD4w1R7cQuIGJn8IxeIjhBQPXDAlbs-a1S51zmvztMhrxpQcjFl7DSxOllqUVkm2TmTNtCwstRgnWZ1zFIA7zIIjt8qa9S9NzX9FUh75wGwMJdmCh94IeMX8VCsZNM7MJGdMb-8V2A9vRoTbDlO7IGOQbgQOsFSFJNBuveuKvaWmsbMQ5bMX3MXL2h398cufO7c8yIh6DnsMWFnjaNjdySmzDFtvtaIYX9pSPyeCxEDxqnhjSvVEIAWNofXPqiLBUBYfUQ_wLgWHePLYAtbwLSJV9kPjr2Bayo1TGrs4JwNiKPhrqrZBULzkEUzh6-Mh2MPaBNwqYPAARkYXbhQ8tDBkJdcZYgg-0G654ZUuc0LL2p2ioB8mICYDBNVZzzJHnQrRDM8UIcdjek_cjXMAyYAZmYZUFjM-4rhopDNCBu5A2yZxMwNz2ssaMLD1INNsIXJsxHcZMjY1goEY-AALgksTGhmRHdKnhHldXKK-2FdQCbeYvrSnU2MvaBzYJ4iBnAtB7nqlMKcsP7nGFzbMmeYHLWXhG5rJxYsVXApSA0Wv8q62NgQIMO6QF3TPpYIVAyfhm1bCFjbP2Li2W-wLiRDnysl13kGkjBvBUVhJZ4jh2zwczw7i0TOVlWjner_Q3v__gd7-9-t6vYiOb8UM0LmnDvSsBNEPgKNKZkArayhGcW5sEVzwUuiPYs5BF544aRkQMjB2Kt2HBdpK42mAOBYfbqUNoYr83smEY98Fqk9vIjn16TpVpFI39FEHGgo4Awn1rDmAhnXXbniCcvQTmwawzzWp42n9lgpjPD7rgip343CwOjNomhm0pEpakEiHZESd2YSdYrfCbLOx2evcVzam5xVOfdeMAQGxTzlifStbz9YBiHDXHw3IN-kT-N_XqS3Qy14iEqbokbGcFRwUK0WcNjMLMzdMUfSLA4LJ_OahR2OyKq16GmPSUKZj5277IX__9zmcf_vH2X2__-cNo8NcwUs8i7fM2HDTllpYKNm4mGtiZQ0VkrFTkjXuoKoYockiPgZKbKFg5zzLP3Qn_KrpnBRBc8PI-4vo17C8meEDOPGF4YU1LwFim8GX092agt4-b75qDpEIuAiRkzTMOVXT5xoAsadNc1EkQAF-KtOC-RV-_lx5DQEo8C1sR7zc0C0r_xHl3lVQKwMqOUgUfP49QIb_S4wlZ5SEXU6v-FRYoc-waOGWRSlPWjBdnvJt4t4DXQJtIJOymEtvPPOsZ_zRSoMA50cZsuhDanjolHqlnMeuWwfohmfZACWC_nsR_P_pmiAqyU8-6-BDGYiF1IocBy3aL_-5jmSWzad59gEUKD0KfrvpR_DnwzmpMB5aIi4es7lPwxyuqSYFbrbwVCAEeOJ9X5HG3Y8_Vs4ypRevQvOnGr2dcxX32kd086tBYPvCTkOMcWU9arkWsVB1ZHfhIwQ5i4gC1IsSYoYfsT10Sl5eTutjiHtDZJcnA2Kmsx4V7m3XUy36J6RXOFmZAxi31uSf8yQJTYc-ais61ZtqiICaF3KJm5OjMXjZnX8ykZXKTWU0ZjqPQqsAKfc_j-6CZZ1zqwpO64iOx4__l15jJXcinZI-Rj90BAXbCvuHdM4fvYe-5SGYANBCbKueN8N1dZCOJ4gOrnt-yf7CUntLeE8ZMybxbeiFcDVmXOHvh4W_BX_VlvqQAYKhbM_zPuT9WiJm3MOZUemc9IIbPMV4ZO3dDw0_Yuuy9hTyBvho0bLvdHQToCiE29nXk5NY2bU5UKgYzPeWCc5hbO50rfGwr3hTsw_prqgdqNaVUTNsHSqhTlpvKv0Y99bvJRP9TG0RfRukD_3E7tZL_oeAXlj9ytWahXtEsJsQELXKyLNZXdCzP29YiRbCfWDeC3LHuJYSfUiCOaKJdq5C09iVFgjDQfo5GzZiVj0wSVMrHmOSS-veI-9xBaEWpoUjzjcStTs6KQ2TrCP3U20WoQkTqpXcZnhF8iAHL2-J9eXYcORLh5rkansItIub9SmqFBQn3sepaVEKBJ2ySnAeMzrugAOYfC57aPWPrNyvZOkO2uygnta4c5CPbdW6EQfbI7Pe669A1CnkLDI1g6gUG3NBTQeNO7RZ1iie4lRxIysIExTSNrRdwbjx62GTttY_uXSj2ClE-Wu9c7Qq1GJcHK1sqnz0V9SvlxoR97YJIHHvHtoljuHLG5s3kllDMLMGNlRK0NoFK2-4eetosqIZeH3aUAzCNgVfMmDS_Smj1wiUIBEetas8r6jebJ067FiEa0jC2Nc34kU362Js_A_eLAhCzqwzeXHv5QUT3Msszq50ladJSX_dpUU2dUiHpN7MkmJYsqDbwN0p1Ic4hS2fObVQXcvuKK7eqU6Ljp4hqBxiZQQAjMYpWAiu4pOP8TiVPTvbCr1bSNQ6C3bnYXUGey7Z_HMLCWwLy8Gd8unYDeJ-SD4UEddNoxjH0SxeZ_f5ajVSAsLHCSl_nHacjdtHjMnHl_llHHV-auK8DbXN2Jkl4oDhZ7rtsGKhmwfJZhY7JzcIGFYXNSyFiu_0C-Zsm7n8sg-5KtnfB_hc_u-pF1tCRpCdih3kfMSDwZKdkfBZ_3ko5E0HsTry3W2WedjK9xetagX_i5HyvfTAo_JWG29VRAcJK3L9woK5QLW3tkMtmoU0TIOZseqHZjRzhYgs6Hw6RyAwu5VpcuFhnrho9XPOWumNn2NS8d5eQbeMZnA8lb0sVuEIKSKWIBHsJFmMliSZ-Yws-zFzdV2DZ44D7SscGQQAfkWmze3SeFVwgjZyqJELlXLSoqa--Hwe6_X7ErIZksQBdQgrnJCJwsnblm72syXO2EgFtOHjIs_cV6zJ0BZi0Qp8G33PpaQgw8igJJguFhBrCEzHQqXi-9xATOW3Nva29SSBOL2lfV_ZSIH9OUCx4fCHFKyI4y3ABYLeJayKdOwpnKk6sRA1F5ArE15s4pdipnUuzAuQGZf80rhqFNxByJVyF20Dvd9opPDqQZS5Vy6_juTkbwXPjOFt4rmj6k6L8Ys9WcEXmy32uh2Pr0MftOmeMLyR-wPWJFP1Y8YK7BmGupWAea3oZ3BmfZr_gCe_5PwoeMqfzCPJrWsfmjYmWyiiYCJvLC8dClXPGwMChN92XNXXEaVdqlYJRqkt1QsugC_haHamCCTW4ZirMGDNLoYuUpDlbQau531KaKwg6rm9sul3OWFZTMw1KuBSjgj0-xXqq7S6C5TeyoPK587xpK3TIpVKo3nop3V3lWkhI8biW873t6A94lF6n2MlwSVSSgfnDjmpBMRJLwqmXWnkcX9wXxw-D--HtmjZYudh3ihRnM8mSmFAZP8BgI8iR9wcaefbDmvpP1s2f0bcbCQEqBnOHkrw_tV6J4KhHmThpyLvDyMw1RTg2Pkx9pbKCcN3XEXSqbxJszgiKoVsXvQ26ETaoo3wxlJggvGBJ2PKD95kPXN_ojmEpRAlhCDylI1tfpHqZRjEpaslfXQhUNi2CtpyUpePmIac-Mob0WCiy6zpFJ-2snbrOvUOR3BEpBAn-b_q0qfxkct03sKdyQDjPKwNtWHjtO-tFktwxC0VwksTWgA7_12UbUti5CzdrppoOTtNejuzWJQNjlsCiy-Sqrs5filM412jSs_nu2GDZPiRc-jkw3Cojln0VSsPgZVQldzMtUVDOkMPelsb5GUGEWJtekjZ5j2yBX0gchmcYqteLBBdfBqEhZ1_NI0rvZvNOiPmKRbq6SmnyVF9cHJP4num1i7D9isJBOC3fpUIHvSA5q_1SbDmmd12AxQSBI0gSnDhNLv3od6KFMNPjQhZEWcmQlEQA87XXpqmTa5atC2Jjf8w-kZgZDmEpZKy89u-F0lS5GJ3Sn0P3RTlg-ReLto8epCOxY_QnC28TNj0vEunyE9W0vfDygKgZHpTmqkAToR9A8J7moSqm7p_EB5bJgwoHqP15uqkjN5VWtJ_5DLULF5h-QuSYqp0m3XrEhZUs2YisRf-mhZ9h5F1rl2zqyx-Q4lMTIrY4t5JzKe1a4mZ0aJd3faSOnxMG-YI5Nxc-kxuwHe1poEJ8DGnC33hg2JfhwGXNIrJka-lOS5GEt3qV26SvvCz0ugg8_AA9QUhcW9WTG6L5AvgRFYG16x_u204SEWdY-D1Wp9OuV_1OKkfkVAWYDefo0ZdUEwx6L4qt4RCsEgVt-pMYLrWm6lbzaCumHH7coVcD9OoRAAGkz-6dBRDWGyE6_5hG7yG9dxVzx2RZNWGVBW1IOmDaDCShEGJyRWYQzjwn8i9PDFTYNp5ohbc1l74oozeOcIZ36QnFJvRtZQjyFYPEUbk7fBy8unPpQRRJzkoLdtBLOl2iugCklEIsr0eDxVJUJx4VjqMRo0p6d3e3kIsFnJVDbysxf8M7EukrbUFMKkKgPW361_ucQCtxgA_3Oym1O8zqMqfSiU7UWIUzJWdqP3J4fDH0CpCB14b_B3ChVpC-A0ddhXklMJGIYwGesLO7spne5fEalXJ0MTWJBrOYTHsfeBpT6PiFmlVHHQJpZBuW7CUxvPcwUoFdIRtSkHt28zSjCOBWuwwPLtH3UKICW3L47FRpUKqtSG4ayPGXvXX0Ohx2q1vhx8c6JCcYn0GCo_rk5qkT6DzuwxyhVIai-UPHtAm1eRNhhHdVY6eBXOlKrzcc8rhk2XVlvvnzgE4MCG9UOyZA2ywS6KE2IBGVRzprdMnUqJ6JRLuIy4QbkXlWimsdpXbCvx-0Tdhujy8Bo2fU5KyySqRd690D16Da8O5Z3zt1FaKvsyGAiLVD5OhOqfszrLwnDnlHHKTs1OoPRRzD6z7-gkodxO7BW0Z8hTOcvP4QMjHVSmES6YrNx-PMQdd37EKTKEYfHHn4Gp_j06xTle4Ox8mNXAIavKfryIDg-WIo_pRsUafdQWTVHRhHL1OyJUtOGjrR5Zq_lXxNr33_H3F7ysM=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="first" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">first</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rq</stringProp>
                  <stringProp name="Argument.value">6</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">context.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://ssp.rambler.ru/context.jsp?wl=rambler&amp;json=1&amp;pad_id=432151618&amp;block_id=455984306&amp;screenw=1440&amp;screenh=900&amp;winw=1290&amp;winh=690&amp;rq=7&amp;rq_sess=baefc5b4-ba31-4e88-9887-2407075685ac&amp;secure=1&amp;vcapirs=8_1_0&amp;jparams=%7B%22puid6%22%3A%22HEAD_MAIN%22%2C%22puid61%22%3A%22804%22%2C%22puid29%22%3A%222%22%2C%22puid30%22%3A%22sleet%22%2C%22pageNumber%22%3A%221%22%2C%22puid42%22%3A%229.7%22%2C%22pli%22%3A%22a%22%2C%22plp%22%3A%22a%22%2C%22pop%22%3A%22a%22%7D&amp;misc=5&amp;rq_type=0&amp;grab=eyJncmFiX3ZlcnNpb24iOiA0fQp4nJVay27d1hWd5yv4AXaMxEUfhmGgaCcddVJk0FnaGEiAtAVSA0Vn92FJdqRYsmU0hi3bke08gKItLy-vRPE-BPgLyF_Il3SvtfYhz6GUABnIvpeXPI_9WHvtdXjz4zt_-fTWOzc_vv3hR7du3vnkzqe3bzVfNXmzambNslm0o2vNutk0RbNpx-2kqa5kzbl93rHPedZU_NZU7bips-9HjzN7btGUTdWcNet2tznT3SPc3SxvZOlYmc2Ej2O7v-JgKxtq1ORXsvYLzN7U7cS-b-yxdZO3-9HcWkczt7-SD9hjzamNzcfs5on9v2z3uIwFB6_t3lWzaqc2WMV7tu1_Ds57bB22XxvCttPuvps1z5PF4mefb42l-JWzdsdGGt-8JuPdvEZTvnPzT3_76J8w7PVbNo6Z6rVtBmusbD5bz7l9qbhgMwxWZ_-09-xv0u5lzQk-YAOYIGsec5UzzGNz5tj6whYBu51xa3MOfQJT4Lo9a-PaUq77Ch7ZAEsu3aaX5bCADYdYZs0r7nxhC4CRinaqe2rc3k61plONbpds-Yd8tjRbrtrdeKKseWru3oWZ8UhuD2HoE98m1zmzh82F7YP2vkyKuMhhTttXu23_L23gk2bW7iZ2s69aNJbd7nMt62Sfx3ZlBWO1e_hdZkZAYvMn2Cush2XxB_hVmyvgy4zj0d-cMgqMDZfFB6LpvqaNapsBITPJ3v7bXMU1YRVvl3iy5nJ2sH-7B3HTnF7FEtwNNBHtaj-aA3JLHW68yBhtSzkkmvVLD4w1R7cQuIGJn8IxeIjhBQPXDAlbs-a1S51zmvztMhrxpQcjFl7DSxOllqUVkm2TmTNtCwstRgnWZ1zFIA7zIIjt8qa9S9NzX9FUh75wGwMJdmCh94IeMX8VCsZNM7MJGdMb-8V2A9vRoTbDlO7IGOQbgQOsFSFJNBuveuKvaWmsbMQ5bMX3MXL2h398cufO7c8yIh6DnsMWFnjaNjdySmzDFtvtaIYX9pSPyeCxEDxqnhjSvVEIAWNofXPqiLBUBYfUQ_wLgWHePLYAtbwLSJV9kPjr2Bayo1TGrs4JwNiKPhrqrZBULzkEUzh6-Mh2MPaBNwqYPAARkYXbhQ8tDBkJdcZYgg-0G654ZUuc0LL2p2ioB8mICYDBNVZzzJHnQrRDM8UIcdjek_cjXMAyYAZmYZUFjM-4rhopDNCBu5A2yZxMwNz2ssaMLD1INNsIXJsxHcZMjY1goEY-AALgksTGhmRHdKnhHldXKK-2FdQCbeYvrSnU2MvaBzYJ4iBnAtB7nqlMKcsP7nGFzbMmeYHLWXhG5rJxYsVXApSA0Wv8q62NgQIMO6QF3TPpYIVAyfhm1bCFjbP2Li2W-wLiRDnysl13kGkjBvBUVhJZ4jh2zwczw7i0TOVlWjner_Q3v__gd7-9-t6vYiOb8UM0LmnDvSsBNEPgKNKZkArayhGcW5sEVzwUuiPYs5BF544aRkQMjB2Kt2HBdpK42mAOBYfbqUNoYr83smEY98Fqk9vIjn16TpVpFI39FEHGgo4Awn1rDmAhnXXbniCcvQTmwawzzWp42n9lgpjPD7rgip343CwOjNomhm0pEpakEiHZESd2YSdYrfCbLOx2evcVzam5xVOfdeMAQGxTzlifStbz9YBiHDXHw3IN-kT-N_XqS3Qy14iEqbokbGcFRwUK0WcNjMLMzdMUfSLA4LJ_OahR2OyKq16GmPSUKZj5277IX__9zmcf_vH2X2__-cNo8NcwUs8i7fM2HDTllpYKNm4mGtiZQ0VkrFTkjXuoKoYockiPgZKbKFg5zzLP3Qn_KrpnBRBc8PI-4vo17C8meEDOPGF4YU1LwFim8GX092agt4-b75qDpEIuAiRkzTMOVXT5xoAsadNc1EkQAF-KtOC-RV-_lx5DQEo8C1sR7zc0C0r_xHl3lVQKwMqOUgUfP49QIb_S4wlZ5SEXU6v-FRYoc-waOGWRSlPWjBdnvJt4t4DXQJtIJOymEtvPPOsZ_zRSoMA50cZsuhDanjolHqlnMeuWwfohmfZACWC_nsR_P_pmiAqyU8-6-BDGYiF1IocBy3aL_-5jmSWzad59gEUKD0KfrvpR_DnwzmpMB5aIi4es7lPwxyuqSYFbrbwVCAEeOJ9X5HG3Y8_Vs4ypRevQvOnGr2dcxX32kd086tBYPvCTkOMcWU9arkWsVB1ZHfhIwQ5i4gC1IsSYoYfsT10Sl5eTutjiHtDZJcnA2Kmsx4V7m3XUy36J6RXOFmZAxi31uSf8yQJTYc-ais61ZtqiICaF3KJm5OjMXjZnX8ykZXKTWU0ZjqPQqsAKfc_j-6CZZ1zqwpO64iOx4__l15jJXcinZI-Rj90BAXbCvuHdM4fvYe-5SGYANBCbKueN8N1dZCOJ4gOrnt-yf7CUntLeE8ZMybxbeiFcDVmXOHvh4W_BX_VlvqQAYKhbM_zPuT9WiJm3MOZUemc9IIbPMV4ZO3dDw0_Yuuy9hTyBvho0bLvdHQToCiE29nXk5NY2bU5UKgYzPeWCc5hbO50rfGwr3hTsw_prqgdqNaVUTNsHSqhTlpvKv0Y99bvJRP9TG0RfRukD_3E7tZL_oeAXlj9ytWahXtEsJsQELXKyLNZXdCzP29YiRbCfWDeC3LHuJYSfUiCOaKJdq5C09iVFgjDQfo5GzZiVj0wSVMrHmOSS-veI-9xBaEWpoUjzjcStTs6KQ2TrCP3U20WoQkTqpXcZnhF8iAHL2-J9eXYcORLh5rkansItIub9SmqFBQn3sepaVEKBJ2ySnAeMzrugAOYfC57aPWPrNyvZOkO2uygnta4c5CPbdW6EQfbI7Pe669A1CnkLDI1g6gUG3NBTQeNO7RZ1iie4lRxIysIExTSNrRdwbjx62GTttY_uXSj2ClE-Wu9c7Qq1GJcHK1sqnz0V9SvlxoR97YJIHHvHtoljuHLG5s3kllDMLMGNlRK0NoFK2-4eetosqIZeH3aUAzCNgVfMmDS_Smj1wiUIBEetas8r6jebJ067FiEa0jC2Nc34kU362Js_A_eLAhCzqwzeXHv5QUT3Msszq50ladJSX_dpUU2dUiHpN7MkmJYsqDbwN0p1Ic4hS2fObVQXcvuKK7eqU6Ljp4hqBxiZQQAjMYpWAiu4pOP8TiVPTvbCr1bSNQ6C3bnYXUGey7Z_HMLCWwLy8Gd8unYDeJ-SD4UEddNoxjH0SxeZ_f5ajVSAsLHCSl_nHacjdtHjMnHl_llHHV-auK8DbXN2Jkl4oDhZ7rtsGKhmwfJZhY7JzcIGFYXNSyFiu_0C-Zsm7n8sg-5KtnfB_hc_u-pF1tCRpCdih3kfMSDwZKdkfBZ_3ko5E0HsTry3W2WedjK9xetagX_i5HyvfTAo_JWG29VRAcJK3L9woK5QLW3tkMtmoU0TIOZseqHZjRzhYgs6Hw6RyAwu5VpcuFhnrho9XPOWumNn2NS8d5eQbeMZnA8lb0sVuEIKSKWIBHsJFmMliSZ-Yws-zFzdV2DZ44D7SscGQQAfkWmze3SeFVwgjZyqJELlXLSoqa--Hwe6_X7ErIZksQBdQgrnJCJwsnblm72syXO2EgFtOHjIs_cV6zJ0BZi0Qp8G33PpaQgw8igJJguFhBrCEzHQqXi-9xATOW3Nva29SSBOL2lfV_ZSIH9OUCx4fCHFKyI4y3ABYLeJayKdOwpnKk6sRA1F5ArE15s4pdipnUuzAuQGZf80rhqFNxByJVyF20Dvd9opPDqQZS5Vy6_juTkbwXPjOFt4rmj6k6L8Ys9WcEXmy32uh2Pr0MftOmeMLyR-wPWJFP1Y8YK7BmGupWAea3oZ3BmfZr_gCe_5PwoeMqfzCPJrWsfmjYmWyiiYCJvLC8dClXPGwMChN92XNXXEaVdqlYJRqkt1QsugC_haHamCCTW4ZirMGDNLoYuUpDlbQau531KaKwg6rm9sul3OWFZTMw1KuBSjgj0-xXqq7S6C5TeyoPK587xpK3TIpVKo3nop3V3lWkhI8biW873t6A94lF6n2MlwSVSSgfnDjmpBMRJLwqmXWnkcX9wXxw-D--HtmjZYudh3ihRnM8mSmFAZP8BgI8iR9wcaefbDmvpP1s2f0bcbCQEqBnOHkrw_tV6J4KhHmThpyLvDyMw1RTg2Pkx9pbKCcN3XEXSqbxJszgiKoVsXvQ26ETaoo3wxlJggvGBJ2PKD95kPXN_ojmEpRAlhCDylI1tfpHqZRjEpaslfXQhUNi2CtpyUpePmIac-Mob0WCiy6zpFJ-2snbrOvUOR3BEpBAn-b_q0qfxkct03sKdyQDjPKwNtWHjtO-tFktwxC0VwksTWgA7_12UbUti5CzdrppoOTtNejuzWJQNjlsCiy-Sqrs5filM412jSs_nu2GDZPiRc-jkw3Cojln0VSsPgZVQldzMtUVDOkMPelsb5GUGEWJtekjZ5j2yBX0gchmcYqteLBBdfBqEhZ1_NI0rvZvNOiPmKRbq6SmnyVF9cHJP4num1i7D9isJBOC3fpUIHvSA5q_1SbDmmd12AxQSBI0gSnDhNLv3od6KFMNPjQhZEWcmQlEQA87XXpqmTa5atC2Jjf8w-kZgZDmEpZKy89u-F0lS5GJ3Sn0P3RTlg-ReLto8epCOxY_QnC28TNj0vEunyE9W0vfDygKgZHpTmqkAToR9A8J7moSqm7p_EB5bJgwoHqP15uqkjN5VWtJ_5DLULF5h-QuSYqp0m3XrEhZUs2YisRf-mhZ9h5F1rl2zqyx-Q4lMTIrY4t5JzKe1a4mZ0aJd3faSOnxMG-YI5Nxc-kxuwHe1poEJ8DGnC33hg2JfhwGXNIrJka-lOS5GEt3qV26SvvCz0ugg8_AA9QUhcW9WTG6L5AvgRFYG16x_u204SEWdY-D1Wp9OuV_1OKkfkVAWYDefo0ZdUEwx6L4qt4RCsEgVt-pMYLrWm6lbzaCumHH7coVcD9OoRAAGkz-6dBRDWGyE6_5hG7yG9dxVzx2RZNWGVBW1IOmDaDCShEGJyRWYQzjwn8i9PDFTYNp5ohbc1l74oozeOcIZ36QnFJvRtZQjyFYPEUbk7fBy8unPpQRRJzkoLdtBLOl2iugCklEIsr0eDxVJUJx4VjqMRo0p6d3e3kIsFnJVDbysxf8M7EukrbUFMKkKgPW361_ucQCtxgA_3Oym1O8zqMqfSiU7UWIUzJWdqP3J4fDH0CpCB14b_B3ChVpC-A0ddhXklMJGIYwGesLO7spne5fEalXJ0MTWJBrOYTHsfeBpT6PiFmlVHHQJpZBuW7CUxvPcwUoFdIRtSkHt28zSjCOBWuwwPLtH3UKICW3L47FRpUKqtSG4ayPGXvXX0Ohx2q1vhx8c6JCcYn0GCo_rk5qkT6DzuwxyhVIai-UPHtAm1eRNhhHdVY6eBXOlKrzcc8rhk2XVlvvnzgE4MCG9UOyZA2ywS6KE2IBGVRzprdMnUqJ6JRLuIy4QbkXlWimsdpXbCvx-0Tdhujy8Bo2fU5KyySqRd690D16Da8O5Z3zt1FaKvsyGAiLVD5OhOqfszrLwnDnlHHKTs1OoPRRzD6z7-gkodxO7BW0Z8hTOcvP4QMjHVSmES6YrNx-PMQdd37EKTKEYfHHn4Gp_j06xTle4Ox8mNXAIavKfryIDg-WIo_pRsUafdQWTVHRhHL1OyJUtOGjrR5Zq_lXxNr33_H3F7ysM%3D&amp;browser_family=Chrome&amp;browser_version=88.0.4324.192&amp;os_family=Mac%20OS&amp;os_version=10.14.4&amp;device_type=1&amp;top=1755&amp;left=341&amp;fpruid=pA8AAN9Js1fMQNL2ARGPuAA%3D&amp;lruid=pQ8AAB%2BpUGB8aBvpASWqDQA%3D&amp;callback=Begun_Autocontext_saveFeed2&amp;url=https%3A%2F%2Fwww.rambler.ru%2F" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="os_family" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">os_family</stringProp>
                  <stringProp name="Argument.value">Mac OS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fpruid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fpruid</stringProp>
                  <stringProp name="Argument.value">pA8AAN9Js1fMQNL2ARGPuAA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="device_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">device_type</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="secure" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">secure</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="jparams" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jparams</stringProp>
                  <stringProp name="Argument.value">{&quot;puid6&quot;:&quot;HEAD_MAIN&quot;,&quot;puid61&quot;:&quot;804&quot;,&quot;puid29&quot;:&quot;2&quot;,&quot;puid30&quot;:&quot;sleet&quot;,&quot;pageNumber&quot;:&quot;1&quot;,&quot;puid42&quot;:&quot;9.7&quot;,&quot;pli&quot;:&quot;a&quot;,&quot;plp&quot;:&quot;a&quot;,&quot;pop&quot;:&quot;a&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="vcapirs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">vcapirs</stringProp>
                  <stringProp name="Argument.value">8_1_0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="top" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">top</stringProp>
                  <stringProp name="Argument.value">1755</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="wl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">wl</stringProp>
                  <stringProp name="Argument.value">rambler</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="json" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">json</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="screenw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">screenw</stringProp>
                  <stringProp name="Argument.value">1440</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="browser_version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">browser_version</stringProp>
                  <stringProp name="Argument.value">88.0.4324.192</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="misc" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">misc</stringProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pad_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pad_id</stringProp>
                  <stringProp name="Argument.value">432151618</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="os_version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">os_version</stringProp>
                  <stringProp name="Argument.value">10.14.4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="winw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">winw</stringProp>
                  <stringProp name="Argument.value">1290</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lruid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lruid</stringProp>
                  <stringProp name="Argument.value">pQ8AAB+pUGB8aBvpASWqDQA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="block_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">block_id</stringProp>
                  <stringProp name="Argument.value">455984306</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="screenh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">screenh</stringProp>
                  <stringProp name="Argument.value">900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://www.rambler.ru/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rq_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rq_type</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="left" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">left</stringProp>
                  <stringProp name="Argument.value">341</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rq_sess" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rq_sess</stringProp>
                  <stringProp name="Argument.value">baefc5b4-ba31-4e88-9887-2407075685ac</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="callback" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">callback</stringProp>
                  <stringProp name="Argument.value">Begun_Autocontext_saveFeed2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="browser_family" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">browser_family</stringProp>
                  <stringProp name="Argument.value">Chrome</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="winh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">winh</stringProp>
                  <stringProp name="Argument.value">690</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="grab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">grab</stringProp>
                  <stringProp name="Argument.value">eyJncmFiX3ZlcnNpb24iOiA0fQp4nJVay27d1hWd5yv4AXaMxEUfhmGgaCcddVJk0FnaGEiAtAVSA0Vn92FJdqRYsmU0hi3bke08gKItLy-vRPE-BPgLyF_Il3SvtfYhz6GUABnIvpeXPI_9WHvtdXjz4zt_-fTWOzc_vv3hR7du3vnkzqe3bzVfNXmzambNslm0o2vNutk0RbNpx-2kqa5kzbl93rHPedZU_NZU7bips-9HjzN7btGUTdWcNet2tznT3SPc3SxvZOlYmc2Ej2O7v-JgKxtq1ORXsvYLzN7U7cS-b-yxdZO3-9HcWkczt7-SD9hjzamNzcfs5on9v2z3uIwFB6_t3lWzaqc2WMV7tu1_Ds57bB22XxvCttPuvps1z5PF4mefb42l-JWzdsdGGt-8JuPdvEZTvnPzT3_76J8w7PVbNo6Z6rVtBmusbD5bz7l9qbhgMwxWZ_-09-xv0u5lzQk-YAOYIGsec5UzzGNz5tj6whYBu51xa3MOfQJT4Lo9a-PaUq77Ch7ZAEsu3aaX5bCADYdYZs0r7nxhC4CRinaqe2rc3k61plONbpds-Yd8tjRbrtrdeKKseWru3oWZ8UhuD2HoE98m1zmzh82F7YP2vkyKuMhhTttXu23_L23gk2bW7iZ2s69aNJbd7nMt62Sfx3ZlBWO1e_hdZkZAYvMn2Cush2XxB_hVmyvgy4zj0d-cMgqMDZfFB6LpvqaNapsBITPJ3v7bXMU1YRVvl3iy5nJ2sH-7B3HTnF7FEtwNNBHtaj-aA3JLHW68yBhtSzkkmvVLD4w1R7cQuIGJn8IxeIjhBQPXDAlbs-a1S51zmvztMhrxpQcjFl7DSxOllqUVkm2TmTNtCwstRgnWZ1zFIA7zIIjt8qa9S9NzX9FUh75wGwMJdmCh94IeMX8VCsZNM7MJGdMb-8V2A9vRoTbDlO7IGOQbgQOsFSFJNBuveuKvaWmsbMQ5bMX3MXL2h398cufO7c8yIh6DnsMWFnjaNjdySmzDFtvtaIYX9pSPyeCxEDxqnhjSvVEIAWNofXPqiLBUBYfUQ_wLgWHePLYAtbwLSJV9kPjr2Bayo1TGrs4JwNiKPhrqrZBULzkEUzh6-Mh2MPaBNwqYPAARkYXbhQ8tDBkJdcZYgg-0G654ZUuc0LL2p2ioB8mICYDBNVZzzJHnQrRDM8UIcdjek_cjXMAyYAZmYZUFjM-4rhopDNCBu5A2yZxMwNz2ssaMLD1INNsIXJsxHcZMjY1goEY-AALgksTGhmRHdKnhHldXKK-2FdQCbeYvrSnU2MvaBzYJ4iBnAtB7nqlMKcsP7nGFzbMmeYHLWXhG5rJxYsVXApSA0Wv8q62NgQIMO6QF3TPpYIVAyfhm1bCFjbP2Li2W-wLiRDnysl13kGkjBvBUVhJZ4jh2zwczw7i0TOVlWjner_Q3v__gd7-9-t6vYiOb8UM0LmnDvSsBNEPgKNKZkArayhGcW5sEVzwUuiPYs5BF544aRkQMjB2Kt2HBdpK42mAOBYfbqUNoYr83smEY98Fqk9vIjn16TpVpFI39FEHGgo4Awn1rDmAhnXXbniCcvQTmwawzzWp42n9lgpjPD7rgip343CwOjNomhm0pEpakEiHZESd2YSdYrfCbLOx2evcVzam5xVOfdeMAQGxTzlifStbz9YBiHDXHw3IN-kT-N_XqS3Qy14iEqbokbGcFRwUK0WcNjMLMzdMUfSLA4LJ_OahR2OyKq16GmPSUKZj5277IX__9zmcf_vH2X2__-cNo8NcwUs8i7fM2HDTllpYKNm4mGtiZQ0VkrFTkjXuoKoYockiPgZKbKFg5zzLP3Qn_KrpnBRBc8PI-4vo17C8meEDOPGF4YU1LwFim8GX092agt4-b75qDpEIuAiRkzTMOVXT5xoAsadNc1EkQAF-KtOC-RV-_lx5DQEo8C1sR7zc0C0r_xHl3lVQKwMqOUgUfP49QIb_S4wlZ5SEXU6v-FRYoc-waOGWRSlPWjBdnvJt4t4DXQJtIJOymEtvPPOsZ_zRSoMA50cZsuhDanjolHqlnMeuWwfohmfZACWC_nsR_P_pmiAqyU8-6-BDGYiF1IocBy3aL_-5jmSWzad59gEUKD0KfrvpR_DnwzmpMB5aIi4es7lPwxyuqSYFbrbwVCAEeOJ9X5HG3Y8_Vs4ypRevQvOnGr2dcxX32kd086tBYPvCTkOMcWU9arkWsVB1ZHfhIwQ5i4gC1IsSYoYfsT10Sl5eTutjiHtDZJcnA2Kmsx4V7m3XUy36J6RXOFmZAxi31uSf8yQJTYc-ais61ZtqiICaF3KJm5OjMXjZnX8ykZXKTWU0ZjqPQqsAKfc_j-6CZZ1zqwpO64iOx4__l15jJXcinZI-Rj90BAXbCvuHdM4fvYe-5SGYANBCbKueN8N1dZCOJ4gOrnt-yf7CUntLeE8ZMybxbeiFcDVmXOHvh4W_BX_VlvqQAYKhbM_zPuT9WiJm3MOZUemc9IIbPMV4ZO3dDw0_Yuuy9hTyBvho0bLvdHQToCiE29nXk5NY2bU5UKgYzPeWCc5hbO50rfGwr3hTsw_prqgdqNaVUTNsHSqhTlpvKv0Y99bvJRP9TG0RfRukD_3E7tZL_oeAXlj9ytWahXtEsJsQELXKyLNZXdCzP29YiRbCfWDeC3LHuJYSfUiCOaKJdq5C09iVFgjDQfo5GzZiVj0wSVMrHmOSS-veI-9xBaEWpoUjzjcStTs6KQ2TrCP3U20WoQkTqpXcZnhF8iAHL2-J9eXYcORLh5rkansItIub9SmqFBQn3sepaVEKBJ2ySnAeMzrugAOYfC57aPWPrNyvZOkO2uygnta4c5CPbdW6EQfbI7Pe669A1CnkLDI1g6gUG3NBTQeNO7RZ1iie4lRxIysIExTSNrRdwbjx62GTttY_uXSj2ClE-Wu9c7Qq1GJcHK1sqnz0V9SvlxoR97YJIHHvHtoljuHLG5s3kllDMLMGNlRK0NoFK2-4eetosqIZeH3aUAzCNgVfMmDS_Smj1wiUIBEetas8r6jebJ067FiEa0jC2Nc34kU362Js_A_eLAhCzqwzeXHv5QUT3Msszq50ladJSX_dpUU2dUiHpN7MkmJYsqDbwN0p1Ic4hS2fObVQXcvuKK7eqU6Ljp4hqBxiZQQAjMYpWAiu4pOP8TiVPTvbCr1bSNQ6C3bnYXUGey7Z_HMLCWwLy8Gd8unYDeJ-SD4UEddNoxjH0SxeZ_f5ajVSAsLHCSl_nHacjdtHjMnHl_llHHV-auK8DbXN2Jkl4oDhZ7rtsGKhmwfJZhY7JzcIGFYXNSyFiu_0C-Zsm7n8sg-5KtnfB_hc_u-pF1tCRpCdih3kfMSDwZKdkfBZ_3ko5E0HsTry3W2WedjK9xetagX_i5HyvfTAo_JWG29VRAcJK3L9woK5QLW3tkMtmoU0TIOZseqHZjRzhYgs6Hw6RyAwu5VpcuFhnrho9XPOWumNn2NS8d5eQbeMZnA8lb0sVuEIKSKWIBHsJFmMliSZ-Yws-zFzdV2DZ44D7SscGQQAfkWmze3SeFVwgjZyqJELlXLSoqa--Hwe6_X7ErIZksQBdQgrnJCJwsnblm72syXO2EgFtOHjIs_cV6zJ0BZi0Qp8G33PpaQgw8igJJguFhBrCEzHQqXi-9xATOW3Nva29SSBOL2lfV_ZSIH9OUCx4fCHFKyI4y3ABYLeJayKdOwpnKk6sRA1F5ArE15s4pdipnUuzAuQGZf80rhqFNxByJVyF20Dvd9opPDqQZS5Vy6_juTkbwXPjOFt4rmj6k6L8Ys9WcEXmy32uh2Pr0MftOmeMLyR-wPWJFP1Y8YK7BmGupWAea3oZ3BmfZr_gCe_5PwoeMqfzCPJrWsfmjYmWyiiYCJvLC8dClXPGwMChN92XNXXEaVdqlYJRqkt1QsugC_haHamCCTW4ZirMGDNLoYuUpDlbQau531KaKwg6rm9sul3OWFZTMw1KuBSjgj0-xXqq7S6C5TeyoPK587xpK3TIpVKo3nop3V3lWkhI8biW873t6A94lF6n2MlwSVSSgfnDjmpBMRJLwqmXWnkcX9wXxw-D--HtmjZYudh3ihRnM8mSmFAZP8BgI8iR9wcaefbDmvpP1s2f0bcbCQEqBnOHkrw_tV6J4KhHmThpyLvDyMw1RTg2Pkx9pbKCcN3XEXSqbxJszgiKoVsXvQ26ETaoo3wxlJggvGBJ2PKD95kPXN_ojmEpRAlhCDylI1tfpHqZRjEpaslfXQhUNi2CtpyUpePmIac-Mob0WCiy6zpFJ-2snbrOvUOR3BEpBAn-b_q0qfxkct03sKdyQDjPKwNtWHjtO-tFktwxC0VwksTWgA7_12UbUti5CzdrppoOTtNejuzWJQNjlsCiy-Sqrs5filM412jSs_nu2GDZPiRc-jkw3Cojln0VSsPgZVQldzMtUVDOkMPelsb5GUGEWJtekjZ5j2yBX0gchmcYqteLBBdfBqEhZ1_NI0rvZvNOiPmKRbq6SmnyVF9cHJP4num1i7D9isJBOC3fpUIHvSA5q_1SbDmmd12AxQSBI0gSnDhNLv3od6KFMNPjQhZEWcmQlEQA87XXpqmTa5atC2Jjf8w-kZgZDmEpZKy89u-F0lS5GJ3Sn0P3RTlg-ReLto8epCOxY_QnC28TNj0vEunyE9W0vfDygKgZHpTmqkAToR9A8J7moSqm7p_EB5bJgwoHqP15uqkjN5VWtJ_5DLULF5h-QuSYqp0m3XrEhZUs2YisRf-mhZ9h5F1rl2zqyx-Q4lMTIrY4t5JzKe1a4mZ0aJd3faSOnxMG-YI5Nxc-kxuwHe1poEJ8DGnC33hg2JfhwGXNIrJka-lOS5GEt3qV26SvvCz0ugg8_AA9QUhcW9WTG6L5AvgRFYG16x_u204SEWdY-D1Wp9OuV_1OKkfkVAWYDefo0ZdUEwx6L4qt4RCsEgVt-pMYLrWm6lbzaCumHH7coVcD9OoRAAGkz-6dBRDWGyE6_5hG7yG9dxVzx2RZNWGVBW1IOmDaDCShEGJyRWYQzjwn8i9PDFTYNp5ohbc1l74oozeOcIZ36QnFJvRtZQjyFYPEUbk7fBy8unPpQRRJzkoLdtBLOl2iugCklEIsr0eDxVJUJx4VjqMRo0p6d3e3kIsFnJVDbysxf8M7EukrbUFMKkKgPW361_ucQCtxgA_3Oym1O8zqMqfSiU7UWIUzJWdqP3J4fDH0CpCB14b_B3ChVpC-A0ddhXklMJGIYwGesLO7spne5fEalXJ0MTWJBrOYTHsfeBpT6PiFmlVHHQJpZBuW7CUxvPcwUoFdIRtSkHt28zSjCOBWuwwPLtH3UKICW3L47FRpUKqtSG4ayPGXvXX0Ohx2q1vhx8c6JCcYn0GCo_rk5qkT6DzuwxyhVIai-UPHtAm1eRNhhHdVY6eBXOlKrzcc8rhk2XVlvvnzgE4MCG9UOyZA2ywS6KE2IBGVRzprdMnUqJ6JRLuIy4QbkXlWimsdpXbCvx-0Tdhujy8Bo2fU5KyySqRd690D16Da8O5Z3zt1FaKvsyGAiLVD5OhOqfszrLwnDnlHHKTs1OoPRRzD6z7-gkodxO7BW0Z8hTOcvP4QMjHVSmES6YrNx-PMQdd37EKTKEYfHHn4Gp_j06xTle4Ox8mNXAIavKfryIDg-WIo_pRsUafdQWTVHRhHL1OyJUtOGjrR5Zq_lXxNr33_H3F7ysM=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rq</stringProp>
                  <stringProp name="Argument.value">7</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">context.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://img02.ssp.rambler.ru/file.jsp?url=2q-IBgZunC-D-RndJSzMoz3Jh72JNU-GRA3Eu4Zin5MRD1rx1CVADdmnWr4RBQuo0diWvboMUjXeAfAKWIPIjonq2hZV213xOUWF5asl6*kKf5Nb14xl0qBubVudnV5u9CMCOl3vCOC7-0GryJGwHYvAA0SIsU2XW4VWxwoVyAUS6K5YDX6TrBtLJLdQGz-gm7U*YfraKRmlAr7va78vYDelDiDEi00oCTPClIhNkIOnJjCulJ29jaH82kJ0H1H3Id7gRTKoJZVqGL-JaBMFOwApbs9ORCEqD1ip*HSuuGO3YIqqTHx1QdzNB8qdP90nyhu8pRuINsBkuLza*2kpPDDz00P6mWW0zaFYtzb3i4rsddKRwAjN1rN-g5Gq-oSCAh6ELGLOcTrnDm0IeiTSf707dHRGziJb-fN0WJuTNG*0oVJPHlGDg4zjbh8TUjsv3yPslsZmt9cyDcwvOTk2Dv8gu9aqMa3FIqXvpgYoMAHr4aiFB*p7P3i*SSNF565Ipfp54JscJ*hosA6AYPfXrjme5nU-M1r6Ek3S8vc0xCJbgdInKh8ZmN7c1I*CmjDd2N-jCGMqS86N613MAlsZdos67y0WZAmnhlsjkJKTFtedMG5mmGDMJcFyCqkUMypic2YU236SxeDHGO0eVgZ8hXw0anFYzd6Ma2aNeDT-Pbf3SG-UvvWCTc-3Z6ORTdsTp-2MKRXtZguwl9k2Uz-5bjLJpsDe1I1hU661RwZh9ghVbxxNfQ2cOUAq6lQOYBnlY8kQPp1-90xuO5Adb42RvBSneEH-gMINJ6lYqQdciVp6LJqVd-CIf0csFjbUoGnBIIgAa40EzOIjx7LdnWZ5heYGuy*o9QN9yqQPPvF4XirsIOCGPVlTNERaY*z-W6aMsT4z9x3p38oGtTjpjYIOJvYgmaK59XROuvbgMq9AQ7ZFuI3W4*WikUAIBfQj72epbyxbKsDhn7hDiQcBVecmooYuzJnBNt7HEZHBVgcG9v-6dWG8ZCBCoMEXOmFiQ7adZqzpAzzaEs5zmf9s9UQm-eKs9AWwpqHrUpVi3N9LGY87-ScCNLF21repSoiDZA1z1MYKqf6w1X8evUEPl9BLvIbES-cthR63oyoiJJasvrVrBpkcGk8wzkPs3-K7M4VfctHeihHOAUVadilxagTilp0IqcqeYYQlr7wXp-RCAZEiE4EGbI-IVbG2jK-df5SOlq03ZcdGn90aiAKmZiyUih9TbwrlTZNqLxetW1Fhm34lBBawn-GSK9NoKN3hdGuT7uHZajgu9HmO-Nib9OR6X*JqYmTyvpw-2h4JgAt8fn1scZdqIUL0ImFBiB0KpFiZR-2xLUUCvHpFUy1L9JapOSjlP9jLT*BikQQedRLQZL3qIEs9vDdh4439dgry*XWOBfQECTV0m*TDCfJV9i51vfuahPLRXD5FVhctEDSKOMYEFU9VY9AaqEk79iihvoTN0IQqcwwUx20oonXJ1uBYjb*UoVK*40wEzs7L7Kx1W1NOwXS1PLYbr3I-kaewa18IydkJ1vxb89vheV25dOEnqdF0NI1vYpzRGQomOdDFLi*2kLzgtMHR2TGCmqBcsHU8AgAAALrcvAoAAAAA&amp;eurl%5B%5D=jUTNYS2IEfM-z5rF82oBdgnZqLUQOhWML4TfgM*t76P9L6jhXMZ69t4h7nOZYl9fXQQBJVqQZygKM-T9U*dhizqLs5lvW5Tz1SeNv-KZ5csCAAAAuty8CgAAAAA&amp;seq=0" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="eurl[]" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eurl[]</stringProp>
                  <stringProp name="Argument.value">jUTNYS2IEfM-z5rF82oBdgnZqLUQOhWML4TfgM*t76P9L6jhXMZ69t4h7nOZYl9fXQQBJVqQZygKM-T9U*dhizqLs5lvW5Tz1SeNv-KZ5csCAAAAuty8CgAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">2q-IBgZunC-D-RndJSzMoz3Jh72JNU-GRA3Eu4Zin5MRD1rx1CVADdmnWr4RBQuo0diWvboMUjXeAfAKWIPIjonq2hZV213xOUWF5asl6*kKf5Nb14xl0qBubVudnV5u9CMCOl3vCOC7-0GryJGwHYvAA0SIsU2XW4VWxwoVyAUS6K5YDX6TrBtLJLdQGz-gm7U*YfraKRmlAr7va78vYDelDiDEi00oCTPClIhNkIOnJjCulJ29jaH82kJ0H1H3Id7gRTKoJZVqGL-JaBMFOwApbs9ORCEqD1ip*HSuuGO3YIqqTHx1QdzNB8qdP90nyhu8pRuINsBkuLza*2kpPDDz00P6mWW0zaFYtzb3i4rsddKRwAjN1rN-g5Gq-oSCAh6ELGLOcTrnDm0IeiTSf707dHRGziJb-fN0WJuTNG*0oVJPHlGDg4zjbh8TUjsv3yPslsZmt9cyDcwvOTk2Dv8gu9aqMa3FIqXvpgYoMAHr4aiFB*p7P3i*SSNF565Ipfp54JscJ*hosA6AYPfXrjme5nU-M1r6Ek3S8vc0xCJbgdInKh8ZmN7c1I*CmjDd2N-jCGMqS86N613MAlsZdos67y0WZAmnhlsjkJKTFtedMG5mmGDMJcFyCqkUMypic2YU236SxeDHGO0eVgZ8hXw0anFYzd6Ma2aNeDT-Pbf3SG-UvvWCTc-3Z6ORTdsTp-2MKRXtZguwl9k2Uz-5bjLJpsDe1I1hU661RwZh9ghVbxxNfQ2cOUAq6lQOYBnlY8kQPp1-90xuO5Adb42RvBSneEH-gMINJ6lYqQdciVp6LJqVd-CIf0csFjbUoGnBIIgAa40EzOIjx7LdnWZ5heYGuy*o9QN9yqQPPvF4XirsIOCGPVlTNERaY*z-W6aMsT4z9x3p38oGtTjpjYIOJvYgmaK59XROuvbgMq9AQ7ZFuI3W4*WikUAIBfQj72epbyxbKsDhn7hDiQcBVecmooYuzJnBNt7HEZHBVgcG9v-6dWG8ZCBCoMEXOmFiQ7adZqzpAzzaEs5zmf9s9UQm-eKs9AWwpqHrUpVi3N9LGY87-ScCNLF21repSoiDZA1z1MYKqf6w1X8evUEPl9BLvIbES-cthR63oyoiJJasvrVrBpkcGk8wzkPs3-K7M4VfctHeihHOAUVadilxagTilp0IqcqeYYQlr7wXp-RCAZEiE4EGbI-IVbG2jK-df5SOlq03ZcdGn90aiAKmZiyUih9TbwrlTZNqLxetW1Fhm34lBBawn-GSK9NoKN3hdGuT7uHZajgu9HmO-Nib9OR6X*JqYmTyvpw-2h4JgAt8fn1scZdqIUL0ImFBiB0KpFiZR-2xLUUCvHpFUy1L9JapOSjlP9jLT*BikQQedRLQZL3qIEs9vDdh4439dgry*XWOBfQECTV0m*TDCfJV9i51vfuahPLRXD5FVhctEDSKOMYEFU9VY9AaqEk79iihvoTN0IQqcwwUx20oonXJ1uBYjb*UoVK*40wEzs7L7Kx1W1NOwXS1PLYbr3I-kaewa18IydkJ1vxb89vheV25dOEnqdF0NI1vYpzRGQomOdDFLi*2kLzgtMHR2TGCmqBcsHU8AgAAALrcvAoAAAAA</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="seq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">seq</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_6}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">file.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://kraken.rambler.ru/cnt/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fid</stringProp>
                  <stringProp name="Argument.value">pA8AAN9Js1fxmJmRAYGXtgA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="eid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eid</stringProp>
                  <stringProp name="Argument.value">76551615898914009</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.15.0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bl</stringProp>
                  <stringProp name="Argument.value">[&quot;cerber::topline::head::menu::mail&quot;,&quot;cerber::topline::head::menu::news&quot;,&quot;cerber::topline::head::menu::kino&quot;,&quot;cerber::topline::head::menu::sport&quot;,&quot;cerber::topline::head::menu::auto&quot;,&quot;cerber::topline::head::menu::starlife&quot;,&quot;cerber::topline::head::menu::horoscopes&quot;,&quot;cerber::topline::head::menu::finance&quot;,&quot;cerber::topline::head::menu::rabota&quot;,&quot;cerber::topline::head::menu::more_button::open&quot;,&quot;cerber::topline::head::user::login&quot;,&quot;cerber::coronavirus::head::text&quot;,&quot;cerber::head::desktop::main::ad_remover_button::432151666&quot;,&quot;cerber::footer::head::main::logo&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::world&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::moscow_city&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::politics&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::community&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::incidents&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::army&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::tech&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::starlife&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::video&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::articles&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::tests&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::photo&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::economics&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::business&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::markets&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::money&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::realty&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::currencies&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::calculators::converter&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::currencies::usd&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::currencies::eur&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::currencies::consensus&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::currencies::exchange&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::currencies::kross-kurs&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::fashion&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::beauty&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::love&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::stars&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::cooking&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::health&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::psychology&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::home&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::children&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::photo&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::video&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::movies&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::tv&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::series&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::actors&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::video&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::photo&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::articles&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::tests&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::football&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::hockey&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::basketball&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::biathlon&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::auto&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::figureskating&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::tennis&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::mma&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::boxing&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::chess&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::athletics&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::summer&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::winter&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::auto_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::auto_media::news&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::auto_media::testdrives&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::auto_media::navigator&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::auto_media::pdd&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::auto_media::exam&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::weekend_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::weekend_media::read&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::weekend_media::people&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::weekend_media::items&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::weekend_media::crazy-world&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::weekend_media::places&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::promokody&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::promokody::shops::wildberries-ru&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::promokody::shops::ozon-ru&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::promokody::shops::beru-ru&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::promokody::shops::apteka-ru&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::promokody::shops::aliexpress-ru&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::news&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::pharma&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::medscience&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::folkmedicine&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::healthylife&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::video&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::articles&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes::dreams&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes::names&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes::fortune&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes::moon::calendar&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes::chinese&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes::primety::calendar&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::games&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::games&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::games::online&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::games::cybersport&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::travel&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::travel::guide&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::travel::news&quot;,&quot;cerber::footer::head::main::corp&quot;,&quot;cerber::widgets::widget.geo::close&quot;,&quot;cerber::widgets::widget.geo::close&quot;,&quot;cerber::widgets::widget.geo::auto&quot;,&quot;cerber::widgets::widget.geo::choose&quot;,&quot;cerber::widgets::widget.geo::choose::input&quot;,&quot;cerber::widgets::widget.geo::save&quot;,&quot;cerber::widgets::widget.geo::cancel&quot;,&quot;head::top_news_block::1&quot;,&quot;head::top_news_block::2&quot;,&quot;head::top_news_block::3&quot;,&quot;head::top_news_block::4&quot;,&quot;head::top_news_block::6&quot;,&quot;head::top_news_block::7&quot;,&quot;head::top_news_block::8&quot;,&quot;head::top_news_block::9&quot;,&quot;head::top_news_block::11&quot;,&quot;head::view::horizontal&quot;,&quot;head::view::square&quot;,&quot;head::top_news_block::13::image&quot;,&quot;head::top_news_block::14::image&quot;,&quot;head::top_news_block::15::no_image&quot;,&quot;head::top_news_block::16::image&quot;,&quot;head::top_news_block::18::blockquote&quot;,&quot;head::top_news_block::19::no_image&quot;,&quot;head::top_news_block::20::image&quot;,&quot;head::top_news_block::23::no_image&quot;,&quot;head::top_news_block::21::image&quot;,&quot;head::top_news_block::24::image&quot;,&quot;head::top_news_block::22::no_image&quot;,&quot;head::top_news_block::25::image&quot;,&quot;head::top_news_block::26::image&quot;,&quot;head::top_news_block::27::image&quot;,&quot;head::top_news_block::28::image&quot;,&quot;head::top_news_block::29::image&quot;,&quot;head::rec::1::image&quot;,&quot;head::main::widget_horo::common::button&quot;,&quot;head::rec::6::image&quot;,&quot;head::rec::7::no_image&quot;,&quot;head::rec::8::no_image&quot;,&quot;head::rec::9::no_image&quot;,&quot;head::rec::10::no_image&quot;,&quot;head::rec::11::image&quot;,&quot;head::rec::12::image&quot;,&quot;head::rec::13::image&quot;,&quot;head::rec::14::image&quot;,&quot;head::rec::15::image&quot;,&quot;head::rec::16::image&quot;,&quot;head::rec::17::blockquote&quot;,&quot;head::rec::18::image&quot;,&quot;head::rec::21::image&quot;,&quot;head::rec::19::image&quot;,&quot;head::rec::22::image&quot;,&quot;head::rec::20::no_image&quot;,&quot;head::rec::23::image&quot;,&quot;head::rec::25::image&quot;,&quot;head::rec::26::image&quot;,&quot;head::rec::27::image&quot;,&quot;head::rec::28::image&quot;,&quot;head::rec::29::image&quot;,&quot;head::rec::30::image&quot;,&quot;head::rec::31::no_image&quot;,&quot;head::rec::32::image&quot;,&quot;head::rec::33::image&quot;,&quot;head::rec::34::image&quot;,&quot;head::rec::35::image&quot;,&quot;head::rec::36::image&quot;,&quot;head::rec::39::no_image&quot;,&quot;head::rec::37::image&quot;,&quot;head::rec::40::no_image&quot;,&quot;head::rec::38::no_image&quot;,&quot;head::rec::41::image&quot;,&quot;head::rec::43::image&quot;,&quot;head::rec::44::no_image&quot;,&quot;head::rec::45::no_image&quot;,&quot;head::rec::46::image&quot;,&quot;head::rec::47::image&quot;,&quot;head::rec::48::no_image&quot;,&quot;head::rec::49::no_image&quot;,&quot;head::rec::50::no_image&quot;,&quot;head::rec::51::image&quot;,&quot;head::rec::52::image&quot;,&quot;head::rec::53::image&quot;,&quot;head::rec::54::image&quot;,&quot;head::rec::57::image&quot;,&quot;head::rec::55::no_image&quot;,&quot;head::rec::58::image&quot;,&quot;head::rec::56::no_image&quot;,&quot;head::rec::59::image&quot;,&quot;head::rec::61::image&quot;,&quot;head::rec::62::image&quot;,&quot;head::rec::63::image&quot;,&quot;head::rec::64::image&quot;,&quot;head::rec::65::no_image&quot;,&quot;head::rec::66::no_image&quot;,&quot;head::rec::67::no_image&quot;,&quot;head::rec::68::image&quot;,&quot;head::rec::69::no_image&quot;,&quot;head::rec::70::no_image&quot;,&quot;head::rec::71::image&quot;,&quot;head::rec::72::no_image&quot;,&quot;head::rec::75::no_image&quot;,&quot;head::rec::73::image&quot;,&quot;head::rec::76::no_image&quot;,&quot;head::rec::74::no_image&quot;,&quot;head::rec::77::image&quot;,&quot;head::rec::79::image&quot;,&quot;head::rec::80::image&quot;,&quot;head::rec::81::image&quot;,&quot;head::rec::82::no_image&quot;,&quot;head::rec::83::no_image&quot;,&quot;head::rec::84::no_image&quot;,&quot;head::rec::85::image&quot;,&quot;head::rec::86::no_image&quot;,&quot;head::rec::87::image&quot;,&quot;head::rec::88::no_image&quot;,&quot;head::rec::89::image&quot;,&quot;head::rec::read_more&quot;,&quot;head::footer::head::main::mobile&quot;,&quot;head::footer::head::main::to_default&quot;,&quot;head::footer::head::main::editors&quot;,&quot;head::footer::head::main::editorial_policy&quot;,&quot;head::footer::head::main::adv&quot;,&quot;head::footer::head::main::help&quot;,&quot;head::footer::head::main::jobs&quot;,&quot;head::footer::head::main::legal&quot;,&quot;head::footer::head::main::smm::vk&quot;,&quot;head::footer::head::main::smm::fb&quot;,&quot;head::footer::head::main::smm::tw&quot;,&quot;head::footer::head::main::smm::ok&quot;,&quot;head::footer::head::main::smm::ig&quot;,&quot;head::footer::head::main::smm::yt&quot;,&quot;head::footer::head::main::smm::tg&quot;,&quot;head::footer::head::main::smm::rss&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">7320059</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="fip" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fip</stringProp>
                  <stringProp name="Argument.value">pA8AAN9Js1fMQNL2ARGPuAA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rid</stringProp>
                  <stringProp name="Argument.value">1615898913.622-996574657</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sp</stringProp>
                  <stringProp name="Argument.value">[&quot;recsys_rambler&quot;,&quot;version_new_dd2&quot;,&quot;prime_status_off&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tid</stringProp>
                  <stringProp name="Argument.value">t1.29811.1088768907.1615898839194</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="et" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">et</stringProp>
                  <stringProp name="Argument.value">bv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_9}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">cnt/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://kraken.rambler.ru/cnt/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fid</stringProp>
                  <stringProp name="Argument.value">pA8AAN9Js1fxmJmRAYGXtgA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="eid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eid</stringProp>
                  <stringProp name="Argument.value">67411615898914005</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.15.0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="bl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bl</stringProp>
                  <stringProp name="Argument.value">[&quot;cerber::topline::head::menu::mail&quot;,&quot;cerber::topline::head::menu::news&quot;,&quot;cerber::topline::head::menu::kino&quot;,&quot;cerber::topline::head::menu::sport&quot;,&quot;cerber::topline::head::menu::auto&quot;,&quot;cerber::topline::head::menu::starlife&quot;,&quot;cerber::topline::head::menu::horoscopes&quot;,&quot;cerber::topline::head::menu::finance&quot;,&quot;cerber::topline::head::menu::rabota&quot;,&quot;cerber::topline::head::menu::more_button::open&quot;,&quot;cerber::topline::head::user::login&quot;,&quot;cerber::coronavirus::head::text&quot;,&quot;cerber::head::desktop::main::ad_remover_button::432151666&quot;,&quot;cerber::footer::head::main::logo&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::world&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::moscow_city&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::politics&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::community&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::incidents&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::army&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::tech&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::starlife&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::video&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::articles&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::tests&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::news_media::photo&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::economics&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::business&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::markets&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::money&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::realty&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::currencies&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::calculators::converter&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::currencies::usd&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::currencies::eur&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::currencies::consensus&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::currencies::exchange&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::finance_media::currencies::kross-kurs&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::fashion&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::beauty&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::love&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::stars&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::cooking&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::health&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::psychology&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::home&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::children&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::photo&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::woman_media::video&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::movies&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::tv&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::series&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::actors&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::video&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::photo&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::articles&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::kino_media::tests&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::football&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::hockey&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::basketball&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::biathlon&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::auto&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::figureskating&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::tennis&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::mma&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::boxing&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::chess&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::athletics&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::summer&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::sport_media::winter&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::auto_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::auto_media::news&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::auto_media::testdrives&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::auto_media::navigator&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::auto_media::pdd&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::auto_media::exam&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::weekend_media&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::weekend_media::read&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::weekend_media::people&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::weekend_media::items&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::weekend_media::crazy-world&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::weekend_media::places&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::promokody&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::promokody::shops::wildberries-ru&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::promokody::shops::ozon-ru&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::promokody::shops::beru-ru&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::promokody::shops::apteka-ru&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::promokody::shops::aliexpress-ru&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::news&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::pharma&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::medscience&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::folkmedicine&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::healthylife&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::video&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::doctor::articles&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes::dreams&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes::names&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes::fortune&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes::moon::calendar&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes::chinese&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::horoscopes::primety::calendar&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::games&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::games&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::games::online&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::games::cybersport&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::travel&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::travel::guide&quot;,&quot;cerber::ooter::head::main::bottom_projects_block::travel::news&quot;,&quot;cerber::footer::head::main::corp&quot;,&quot;cerber::widgets::widget.geo::close&quot;,&quot;cerber::widgets::widget.geo::close&quot;,&quot;cerber::widgets::widget.geo::auto&quot;,&quot;cerber::widgets::widget.geo::choose&quot;,&quot;cerber::widgets::widget.geo::choose::input&quot;,&quot;cerber::widgets::widget.geo::save&quot;,&quot;cerber::widgets::widget.geo::cancel&quot;,&quot;head::top_news_block::1&quot;,&quot;head::top_news_block::2&quot;,&quot;head::top_news_block::3&quot;,&quot;head::top_news_block::4&quot;,&quot;head::top_news_block::6&quot;,&quot;head::top_news_block::7&quot;,&quot;head::top_news_block::8&quot;,&quot;head::top_news_block::9&quot;,&quot;head::top_news_block::11&quot;,&quot;head::view::horizontal&quot;,&quot;head::view::square&quot;,&quot;head::top_news_block::13::image&quot;,&quot;head::top_news_block::14::image&quot;,&quot;head::top_news_block::15::no_image&quot;,&quot;head::top_news_block::16::image&quot;,&quot;head::top_news_block::18::blockquote&quot;,&quot;head::top_news_block::19::no_image&quot;,&quot;head::top_news_block::20::image&quot;,&quot;head::top_news_block::23::no_image&quot;,&quot;head::top_news_block::21::image&quot;,&quot;head::top_news_block::24::image&quot;,&quot;head::top_news_block::22::no_image&quot;,&quot;head::top_news_block::25::image&quot;,&quot;head::top_news_block::26::image&quot;,&quot;head::top_news_block::27::image&quot;,&quot;head::top_news_block::28::image&quot;,&quot;head::top_news_block::29::image&quot;,&quot;head::rec::1::image&quot;,&quot;head::main::widget_horo::common::button&quot;,&quot;head::rec::6::image&quot;,&quot;head::rec::7::no_image&quot;,&quot;head::rec::8::no_image&quot;,&quot;head::rec::9::no_image&quot;,&quot;head::rec::10::no_image&quot;,&quot;head::rec::11::image&quot;,&quot;head::rec::12::image&quot;,&quot;head::rec::13::image&quot;,&quot;head::rec::14::image&quot;,&quot;head::rec::15::image&quot;,&quot;head::rec::16::image&quot;,&quot;head::rec::17::blockquote&quot;,&quot;head::rec::18::image&quot;,&quot;head::rec::21::image&quot;,&quot;head::rec::19::image&quot;,&quot;head::rec::22::image&quot;,&quot;head::rec::20::no_image&quot;,&quot;head::rec::23::image&quot;,&quot;head::rec::25::image&quot;,&quot;head::rec::26::image&quot;,&quot;head::rec::27::image&quot;,&quot;head::rec::28::image&quot;,&quot;head::rec::29::image&quot;,&quot;head::rec::30::image&quot;,&quot;head::rec::31::no_image&quot;,&quot;head::rec::32::image&quot;,&quot;head::rec::33::image&quot;,&quot;head::rec::34::image&quot;,&quot;head::rec::35::image&quot;,&quot;head::rec::36::image&quot;,&quot;head::rec::39::no_image&quot;,&quot;head::rec::37::image&quot;,&quot;head::rec::40::no_image&quot;,&quot;head::rec::38::no_image&quot;,&quot;head::rec::41::image&quot;,&quot;head::rec::43::image&quot;,&quot;head::rec::44::no_image&quot;,&quot;head::rec::45::no_image&quot;,&quot;head::rec::46::image&quot;,&quot;head::rec::47::image&quot;,&quot;head::rec::48::no_image&quot;,&quot;head::rec::49::no_image&quot;,&quot;head::rec::50::no_image&quot;,&quot;head::rec::51::image&quot;,&quot;head::rec::52::image&quot;,&quot;head::rec::53::image&quot;,&quot;head::rec::54::image&quot;,&quot;head::rec::57::image&quot;,&quot;head::rec::55::no_image&quot;,&quot;head::rec::58::image&quot;,&quot;head::rec::56::no_image&quot;,&quot;head::rec::59::image&quot;,&quot;head::rec::61::image&quot;,&quot;head::rec::62::image&quot;,&quot;head::rec::63::image&quot;,&quot;head::rec::64::image&quot;,&quot;head::rec::65::no_image&quot;,&quot;head::rec::66::no_image&quot;,&quot;head::rec::67::no_image&quot;,&quot;head::rec::68::image&quot;,&quot;head::rec::69::no_image&quot;,&quot;head::rec::70::no_image&quot;,&quot;head::rec::71::image&quot;,&quot;head::rec::72::no_image&quot;,&quot;head::rec::75::no_image&quot;,&quot;head::rec::73::image&quot;,&quot;head::rec::76::no_image&quot;,&quot;head::rec::74::no_image&quot;,&quot;head::rec::77::image&quot;,&quot;head::rec::79::image&quot;,&quot;head::rec::80::image&quot;,&quot;head::rec::81::image&quot;,&quot;head::rec::82::no_image&quot;,&quot;head::rec::83::no_image&quot;,&quot;head::rec::84::no_image&quot;,&quot;head::rec::85::image&quot;,&quot;head::rec::86::no_image&quot;,&quot;head::rec::87::image&quot;,&quot;head::rec::88::no_image&quot;,&quot;head::rec::89::image&quot;,&quot;head::rec::read_more&quot;,&quot;head::footer::head::main::mobile&quot;,&quot;head::footer::head::main::to_default&quot;,&quot;head::footer::head::main::editors&quot;,&quot;head::footer::head::main::editorial_policy&quot;,&quot;head::footer::head::main::adv&quot;,&quot;head::footer::head::main::help&quot;,&quot;head::footer::head::main::jobs&quot;,&quot;head::footer::head::main::legal&quot;,&quot;head::footer::head::main::smm::vk&quot;,&quot;head::footer::head::main::smm::fb&quot;,&quot;head::footer::head::main::smm::tw&quot;,&quot;head::footer::head::main::smm::ok&quot;,&quot;head::footer::head::main::smm::ig&quot;,&quot;head::footer::head::main::smm::yt&quot;,&quot;head::footer::head::main::smm::tg&quot;,&quot;head::footer::head::main::smm::rss&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">29811</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="rid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rid</stringProp>
                  <stringProp name="Argument.value">1615898913.606-950455378</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sp</stringProp>
                  <stringProp name="Argument.value">[&quot;recsys_rambler&quot;,&quot;version_new_dd2&quot;,&quot;prime_status_off&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="tid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tid</stringProp>
                  <stringProp name="Argument.value">t1.29811.1088768907.1615898839194</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="et" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">et</stringProp>
                  <stringProp name="Argument.value">bv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_9}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">cnt/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.rambler.ru/metrics/" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;name&quot;:&quot;init_render_app&quot;,&quot;value&quot;:37,&quot;type&quot;:&quot;histogram&quot;,&quot;prefix&quot;:&quot;perf&quot;},{&quot;name&quot;:&quot;react_init.new_dd2&quot;,&quot;value&quot;:1,&quot;type&quot;:&quot;counter&quot;,&quot;prefix&quot;:&quot;&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">metrics/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.rambler.ru/metrics/" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;name&quot;:&quot;first_paint&quot;,&quot;value&quot;:1059,&quot;type&quot;:&quot;histogram&quot;,&quot;prefix&quot;:&quot;perf&quot;},{&quot;name&quot;:&quot;first_contentful-paint&quot;,&quot;value&quot;:1059,&quot;type&quot;:&quot;histogram&quot;,&quot;prefix&quot;:&quot;perf&quot;},{&quot;name&quot;:&quot;main_page_size&quot;,&quot;value&quot;:551,&quot;type&quot;:&quot;histogram&quot;,&quot;prefix&quot;:&quot;perf&quot;},{&quot;name&quot;:&quot;latency&quot;,&quot;value&quot;:414.4150000065565,&quot;type&quot;:&quot;histogram&quot;,&quot;prefix&quot;:&quot;perf&quot;},{&quot;name&quot;:&quot;transfer&quot;,&quot;value&quot;:446.17000001017004,&quot;type&quot;:&quot;histogram&quot;,&quot;prefix&quot;:&quot;perf&quot;},{&quot;name&quot;:&quot;DOMContentLoaded&quot;,&quot;value&quot;:1217.6899999612942,&quot;type&quot;:&quot;histogram&quot;,&quot;prefix&quot;:&quot;perf&quot;},{&quot;name&quot;:&quot;load&quot;,&quot;value&quot;:6187.999999965541,&quot;type&quot;:&quot;histogram&quot;,&quot;prefix&quot;:&quot;perf&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">metrics/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.rambler.ru/metrics/" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;name&quot;:&quot;time_to_interactive&quot;,&quot;value&quot;:5473.979999951553,&quot;type&quot;:&quot;histogram&quot;,&quot;prefix&quot;:&quot;perf&quot;}]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">metrics/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${__threadGroupName}_SEARCH ${__threadNum}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://nova.rambler.ru/search?utm_source=head&amp;utm_campaign=self_promo&amp;utm_medium=form&amp;utm_content=search&amp;query=${query}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="utm_campaign" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">utm_campaign</stringProp>
                  <stringProp name="Argument.value">self_promo</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="utm_medium" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">utm_medium</stringProp>
                  <stringProp name="Argument.value">form</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">${query}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="utm_source" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">utm_source</stringProp>
                  <stringProp name="Argument.value">head</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="utm_content" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">utm_content</stringProp>
                  <stringProp name="Argument.value">search</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_11}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">search</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS Selector Extractor" enabled="true">
              <stringProp name="HtmlExtractor.refname">link</stringProp>
              <stringProp name="HtmlExtractor.expr">.Serp__item__link--3g7Km</stringProp>
              <stringProp name="HtmlExtractor.attribute">data-ui</stringProp>
              <stringProp name="HtmlExtractor.default"></stringProp>
              <boolProp name="HtmlExtractor.default_empty_value">true</boolProp>
              <stringProp name="HtmlExtractor.match_number">0</stringProp>
              <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
            </HtmlExtractor>
            <hashTree/>
            <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySamplerProperties">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://kraken.rambler.ru/cnt/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fid</stringProp>
                  <stringProp name="Argument.value">pA8AAN9Js1fxmJmRAYGXtgA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eid</stringProp>
                  <stringProp name="Argument.value">51811615898987425</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.15.0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bl</stringProp>
                  <stringProp name="Argument.value">[&quot;cerber-topline::search-top::projects::mail&quot;,&quot;cerber-topline::search-top::projects::news_media&quot;,&quot;cerber-topline::search-top::projects::kino_media&quot;,&quot;cerber-topline::search-top::projects::sport_media&quot;,&quot;cerber-topline::search-top::projects::auto_media&quot;,&quot;cerber-topline::search-top::projects::horoscopes&quot;,&quot;cerber-topline::search-top::projects::finance_media&quot;,&quot;cerber-topline::search-top::projects::search_rabota&quot;,&quot;cerber-topline::search-top::projects::show-more-projects&quot;,&quot;logo::logo_rambler&quot;,&quot;cerber-search::search::input&quot;,&quot;cerber-search::search::button&quot;,&quot;cerber-search::search::suggest&quot;,&quot;ui::nova::menu::r0-self&quot;,&quot;ui::nova::menu::images&quot;,&quot;ui::nova::menu::org&quot;,&quot;ui::nova::menu::rabota&quot;,&quot;ui::nova::menu::news_media&quot;,&quot;ui::nova::menu::browser&quot;,&quot;ui::nova::menu::browser::browser_download&quot;,&quot;ui::nova::menu::browser::browser_install&quot;,&quot;ui::nova::menu::filter&quot;,&quot;ui::nova::mixin::letidor_top_1::title&quot;,&quot;ui::nova::mixin::letidor_top_1::project&quot;,&quot;ui::nova::mixin::letidor_top_1::breadcrumb&quot;,&quot;ui::nova::mixin::letidor_top_1::img_0&quot;,&quot;ui::nova::mixin::letidor_top_1::topic_0&quot;,&quot;ui::nova::mixin::letidor_top_1::title_0&quot;,&quot;ui::nova::mixin::letidor_top_1::topic_1&quot;,&quot;ui::nova::mixin::letidor_top_1::title_1&quot;,&quot;ui::nova::mixin::letidor_top_1::topic_2&quot;,&quot;ui::nova::mixin::letidor_top_1::title_2&quot;,&quot;ui::nova::serp::item::item_0::title_0&quot;,&quot;ui::nova::serp::item::item_0::url_0&quot;,&quot;ui::nova::serp::item::item_0::saved_0&quot;,&quot;ui::nova::serp::item::item_0::more_0&quot;,&quot;ui::nova::serp::item::item_1::title_1&quot;,&quot;ui::nova::serp::item::item_1::url_1&quot;,&quot;ui::nova::serp::item::item_1::saved_1&quot;,&quot;ui::nova::serp::item::item_1::more_1&quot;,&quot;ui::nova::serp::item::item_2::title_2&quot;,&quot;ui::nova::serp::item::item_2::url_2&quot;,&quot;ui::nova::serp::item::item_2::saved_2&quot;,&quot;ui::nova::serp::item::item_2::more_2&quot;,&quot;ui::nova::serp::item::item_3::title_3&quot;,&quot;ui::nova::serp::item::item_3::url_3&quot;,&quot;ui::nova::serp::item::item_3::saved_3&quot;,&quot;ui::nova::serp::item::item_3::more_3&quot;,&quot;ui::nova::serp::item::item_4::title_4&quot;,&quot;ui::nova::serp::item::item_4::url_4&quot;,&quot;ui::nova::serp::item::item_4::saved_4&quot;,&quot;ui::nova::serp::item::item_4::more_4&quot;,&quot;ui::nova::mixin::coolstream_top_2::title&quot;,&quot;ui::nova::mixin::coolstream_top_2::project&quot;,&quot;ui::nova::mixin::coolstream_top_2::breadcrumb&quot;,&quot;ui::nova::mixin::coolstream_top_2::img_0&quot;,&quot;ui::nova::mixin::coolstream_top_2::topic_0&quot;,&quot;ui::nova::mixin::coolstream_top_2::title_0&quot;,&quot;ui::nova::mixin::coolstream_top_2::topic_1&quot;,&quot;ui::nova::mixin::coolstream_top_2::title_1&quot;,&quot;ui::nova::mixin::coolstream_top_2::topic_2&quot;,&quot;ui::nova::mixin::coolstream_top_2::title_2&quot;,&quot;ui::nova::mixin::coolstream_top_2::more&quot;,&quot;ui::nova::serp::item::item_5::title_5&quot;,&quot;ui::nova::serp::item::item_5::url_5&quot;,&quot;ui::nova::serp::item::item_5::saved_5&quot;,&quot;ui::nova::serp::item::item_5::more_5&quot;,&quot;ui::nova::serp::item::item_6::title_6&quot;,&quot;ui::nova::serp::item::item_6::url_6&quot;,&quot;ui::nova::serp::item::item_6::saved_6&quot;,&quot;ui::nova::serp::item::item_6::more_6&quot;,&quot;ui::nova::serp::item::item_7::title_7&quot;,&quot;ui::nova::serp::item::item_7::url_7&quot;,&quot;ui::nova::serp::item::item_7::saved_7&quot;,&quot;ui::nova::serp::item::item_7::more_7&quot;,&quot;ui::nova::serp::item::item_8::title_8&quot;,&quot;ui::nova::serp::item::item_8::url_8&quot;,&quot;ui::nova::serp::item::item_8::saved_8&quot;,&quot;ui::nova::serp::item::item_8::more_8&quot;,&quot;ui::nova::direct_halfpremium::direct_halfpremium_0::title&quot;,&quot;ui::nova::direct_halfpremium::direct_halfpremium_0::domain&quot;,&quot;ui::nova::direct_halfpremium::direct_halfpremium_0::adv&quot;,&quot;ui::nova::direct_halfpremium::direct_halfpremium_0::sitelink_0&quot;,&quot;ui::nova::direct_halfpremium::direct_halfpremium_0::sitelink_1&quot;,&quot;ui::nova::direct_halfpremium::direct_halfpremium_0::sitelink_2&quot;,&quot;ui::nova::direct_halfpremium::direct_halfpremium_0::sitelink_3&quot;,&quot;ui::nova::direct_halfpremium::direct_halfpremium_0::sitelink_4&quot;,&quot;ui::nova::direct_halfpremium::direct_halfpremium_0::sitelink_5&quot;,&quot;ui::nova::direct_halfpremium::direct_halfpremium_0::contacts&quot;,&quot;ui::nova::hints::hints_rel_ref::item_0&quot;,&quot;ui::nova::hints::hints_rel_ref::item_1&quot;,&quot;ui::nova::hints::hints_rel_ref::item_2&quot;,&quot;ui::nova::hints::hints_rel_ref::item_3&quot;,&quot;ui::nova::hints::hints_rel_ref::item_4&quot;,&quot;ui::nova::hints::hints_rel_ref::item_5&quot;,&quot;ui::nova::hints::hints_rel_ref::item_6&quot;,&quot;ui::nova::hints::hints_rel_ref::item_7&quot;,&quot;ui::nova::hints::hints_rel_ref::item_8&quot;,&quot;ui::nova::hints::hints_rel_ref::item_9&quot;,&quot;ui::nova::paging::page_2&quot;,&quot;ui::nova::paging::page_3&quot;,&quot;ui::nova::paging::page_4&quot;,&quot;ui::nova::paging::page_5&quot;,&quot;ui::nova::paging::page_6&quot;,&quot;ui::nova::paging::page_7&quot;,&quot;ui::nova::paging::page_next&quot;,&quot;ui::nova::adv::direct_rtb_right&quot;,&quot;ui::nova::location&quot;,&quot;ui::nova::settings_control&quot;,&quot;ui::nova::rabota_widget::install&quot;,&quot;ui::nova::rabota_widget::close&quot;,&quot;ui::nova::rabota_widget::close&quot;,&quot;ui::nova::widgets::browser&quot;,&quot;ui::nova::widgets::rabota&quot;,&quot;ui::nova::widgets::start&quot;,&quot;ui::nova::widgets::mobile_mail&quot;,&quot;ui::nova::footer::about&quot;,&quot;ui::nova::footer::mobile&quot;,&quot;ui::nova::footer::help&quot;,&quot;ui::nova::footer::feedback&quot;,&quot;ui::nova::footer::legal&quot;,&quot;ui::nova::footer::remove&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">4455308</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rid</stringProp>
                  <stringProp name="Argument.value">1615898987.346-780576661</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sp</stringProp>
                  <stringProp name="Argument.value">[&quot;a0&quot;,&quot;a9&quot;,&quot;a11&quot;,&quot;a12&quot;,&quot;a13&quot;,&quot;b14&quot;,&quot;b23&quot;,&quot;a26&quot;,&quot;b28&quot;,&quot;a29&quot;,&quot;a30&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tid</stringProp>
                  <stringProp name="Argument.value">t1.29811.1088768907.1615898839194</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="et" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">et</stringProp>
                  <stringProp name="Argument.value">bv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_9}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">cnt/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://www.rambler.ru/api/v3/topline/feed/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/v3/topline/feed/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://id.rambler.ru/jsonrpc" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;method&quot;:&quot;Rambler::Id::get_profile_info&quot;,&quot;params&quot;:[{&quot;get_chain_id&quot;:0,&quot;get_accounts_by_provider&quot;:&quot;uniq.lp.love.passport.rambler.ru&quot;}],&quot;rpc&quot;:&quot;2.0&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_2}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">jsonrpc</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://kraken.rambler.ru/cnt/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fid</stringProp>
                  <stringProp name="Argument.value">pA8AAN9Js1fxmJmRAYGXtgA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eid</stringProp>
                  <stringProp name="Argument.value">65611615898989882</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.15.0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bl</stringProp>
                  <stringProp name="Argument.value">[&quot;cerber-topline::search-top::projects::mail&quot;,&quot;cerber-topline::search-top::projects::news_media&quot;,&quot;cerber-topline::search-top::projects::kino_media&quot;,&quot;cerber-topline::search-top::projects::sport_media&quot;,&quot;cerber-topline::search-top::projects::auto_media&quot;,&quot;cerber-topline::search-top::projects::horoscopes&quot;,&quot;cerber-topline::search-top::projects::finance_media&quot;,&quot;cerber-topline::search-top::projects::search_rabota&quot;,&quot;cerber-topline::search-top::projects::show-more-projects&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">4455308</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rid</stringProp>
                  <stringProp name="Argument.value">1615898987.346-780576661</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sp</stringProp>
                  <stringProp name="Argument.value">[&quot;a0&quot;,&quot;a9&quot;,&quot;a11&quot;,&quot;a12&quot;,&quot;a13&quot;,&quot;b14&quot;,&quot;b23&quot;,&quot;a26&quot;,&quot;b28&quot;,&quot;a29&quot;,&quot;a30&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tid</stringProp>
                  <stringProp name="Argument.value">t1.29811.1088768907.1615898839194</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="et" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">et</stringProp>
                  <stringProp name="Argument.value">bv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_9}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">cnt/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://ssp.rambler.ru/userip" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">userip</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://ssp.rambler.ru/context.jsp?wl=rambler&amp;json=1&amp;pad_id=469345540&amp;first=1&amp;block_id=492316873&amp;screenw=1440&amp;screenh=900&amp;winw=1290&amp;winh=690&amp;rq=0&amp;rq_sess=69C7967153EB295B72FF1F79C4E9FF75&amp;secure=1&amp;vcapirs=8_1_0&amp;jparams=%7B%22puid42%22%3A%225.6%22%2C%22pli%22%3A%22a%22%2C%22plp%22%3A%22a%22%2C%22pop%22%3A%22a%22%7D&amp;rq_type=0&amp;grab=eyJncmFiX3ZlcnNpb24iOiA0fQp4nH1VTUsbURTd-yuebmzBJFWkLRJS6LrLbrqsGFBqCUhcFLpIJhWVWAJqUdqmUaG0UChjdJzJzGQC-QX3_QV_Sc-9b5K8SdugIZn37r3n3HM_prhZfbtdmitull9vlIrVrep2uUQDXaOAuuRpR93XThVdkEsxXVOEo1qBBpRQoOsUFgvGo1gQ_7niemXjHUdbLr0oV7c2Kju4WTYH00H6CNKlRNe1Q4GBiXVT4dzVBzAK1FMlly4-HvUUwyq48LUH24YiHyGZLEdpWFAdxI7xuWND8eEvRKaeoMHFBZNEOxO3lRJdgRkQ15Ru0A0sblMHD0TASPiq4S_qTPSZH0YS2IT0qa-bek_pFvm6SSG47iEtiIVbAK0YoNWciODAuqVbCjiJ3tdHis4Bm-gan7WBEAIyQliPM-D8IRwemFZkDhLYMLE-_the8rTLhx--ot84idlLNycs7DSWmCUjH-IEOUACB2EHuccmXEK30CSUwy6MQ9ZOHJqijpQJvBmRWd-JriOgb7gO2Za_IX9WwmGEgJ_F32H0f5qonKJLEXSfG4LFuuZqQYNIOqTPzYFC5PN5C_mvTj4WmYJxPRn1yHI4k_7bh8osqFV4yN1BC58jwie6yiv6wQKwTK5k7GXun83Inv_DqXRtoksMOjtTCMb6D6TpukgHZnbaU2quqYVMzy6oB8tPHil9oJ38Q8vtQloYThgArqkUPqDIDBp6lFsDkyhkUHz8UPRTWDbMPOM6tgJm7mRERnlIr0YAaaW585QGaG2PU6un28GMfgQj9MMX8Q7NGPKgcM-6ujWMLMTvEhpzknZ-OzXH-jjjULjuAyUwgL4UVyZDyWgxp6NRloKNWB94wFBwmbMbngNy15jRV7NiZEPIMPqC1TcFUWZLZeh17NH0Z_TauCViTob34vgR1uIBVd5jNUupWJeAOaeLZ7qjRbZY5lTCM0nWoofEckp_lF4er1I8zCs6hdU1n5jc7mTrpFXh7PoyE5OE8uDZyI7fJZiGLCzSXbRtF4H6qrL7cne9PGNSkFZiqcKLNLvdkP-J0JLFKL0kVbhNByNKte39pwT3tROsBPW8Unmzsprf2bXMjkX5err9udqDzD6C_oeQ3rFc2tyg6dT00rEevSnH67-QviIL5sX7B05lmzs%3D&amp;browser_family=Chrome&amp;browser_version=88.0.4324.192&amp;os_family=Mac%20OS&amp;os_version=10.14.4&amp;device_type=1&amp;top=23&amp;left=1185&amp;fpruid=pA8AAN9Js1fMQNL2ARGPuAA%3D&amp;lruid=pQ8AAG6pUGCbD2RUAbSvJAA%3D&amp;callback=Begun_Autocontext_saveFeed1&amp;ref=https%3A%2F%2Fwww.rambler.ru%2F&amp;url=https%3A%2F%2Fnova.rambler.ru%2Fsearch%3Futm_source%3Dhead%26utm_campaign%3Dself_promo%26utm_medium%3Dform%26utm_content%3Dsearch%26query%3D%25D0%25BF%25D1%2580%25D0%25B8%25D0%25B2%25D0%25B5%25D1%2582" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="os_family" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">os_family</stringProp>
                  <stringProp name="Argument.value">Mac OS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="fpruid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fpruid</stringProp>
                  <stringProp name="Argument.value">pA8AAN9Js1fMQNL2ARGPuAA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="device_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">device_type</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="secure" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">secure</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="jparams" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">jparams</stringProp>
                  <stringProp name="Argument.value">{&quot;puid42&quot;:&quot;5.6&quot;,&quot;pli&quot;:&quot;a&quot;,&quot;plp&quot;:&quot;a&quot;,&quot;pop&quot;:&quot;a&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ref" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">ref</stringProp>
                  <stringProp name="Argument.value">https://www.rambler.ru/</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="vcapirs" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">vcapirs</stringProp>
                  <stringProp name="Argument.value">8_1_0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="top" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">top</stringProp>
                  <stringProp name="Argument.value">23</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="wl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">wl</stringProp>
                  <stringProp name="Argument.value">rambler</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="json" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">json</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="screenw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">screenw</stringProp>
                  <stringProp name="Argument.value">1440</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="browser_version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">browser_version</stringProp>
                  <stringProp name="Argument.value">88.0.4324.192</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pad_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">pad_id</stringProp>
                  <stringProp name="Argument.value">469345540</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="os_version" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">os_version</stringProp>
                  <stringProp name="Argument.value">10.14.4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="winw" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">winw</stringProp>
                  <stringProp name="Argument.value">1290</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lruid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">lruid</stringProp>
                  <stringProp name="Argument.value">pQ8AAG6pUGCbD2RUAbSvJAA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="block_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">block_id</stringProp>
                  <stringProp name="Argument.value">492316873</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="screenh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">screenh</stringProp>
                  <stringProp name="Argument.value">900</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="url" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">url</stringProp>
                  <stringProp name="Argument.value">https://nova.rambler.ru/search?utm_source=head&amp;utm_campaign=self_promo&amp;utm_medium=form&amp;utm_content=search&amp;query=%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rq_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rq_type</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="left" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">left</stringProp>
                  <stringProp name="Argument.value">1185</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rq_sess" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rq_sess</stringProp>
                  <stringProp name="Argument.value">69C7967153EB295B72FF1F79C4E9FF75</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="callback" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">callback</stringProp>
                  <stringProp name="Argument.value">Begun_Autocontext_saveFeed1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="browser_family" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">browser_family</stringProp>
                  <stringProp name="Argument.value">Chrome</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="winh" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">winh</stringProp>
                  <stringProp name="Argument.value">690</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="grab" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">grab</stringProp>
                  <stringProp name="Argument.value">eyJncmFiX3ZlcnNpb24iOiA0fQp4nH1VTUsbURTd-yuebmzBJFWkLRJS6LrLbrqsGFBqCUhcFLpIJhWVWAJqUdqmUaG0UChjdJzJzGQC-QX3_QV_Sc-9b5K8SdugIZn37r3n3HM_prhZfbtdmitull9vlIrVrep2uUQDXaOAuuRpR93XThVdkEsxXVOEo1qBBpRQoOsUFgvGo1gQ_7niemXjHUdbLr0oV7c2Kju4WTYH00H6CNKlRNe1Q4GBiXVT4dzVBzAK1FMlly4-HvUUwyq48LUH24YiHyGZLEdpWFAdxI7xuWND8eEvRKaeoMHFBZNEOxO3lRJdgRkQ15Ru0A0sblMHD0TASPiq4S_qTPSZH0YS2IT0qa-bek_pFvm6SSG47iEtiIVbAK0YoNWciODAuqVbCjiJ3tdHis4Bm-gan7WBEAIyQliPM-D8IRwemFZkDhLYMLE-_the8rTLhx--ot84idlLNycs7DSWmCUjH-IEOUACB2EHuccmXEK30CSUwy6MQ9ZOHJqijpQJvBmRWd-JriOgb7gO2Za_IX9WwmGEgJ_F32H0f5qonKJLEXSfG4LFuuZqQYNIOqTPzYFC5PN5C_mvTj4WmYJxPRn1yHI4k_7bh8osqFV4yN1BC58jwie6yiv6wQKwTK5k7GXun83Inv_DqXRtoksMOjtTCMb6D6TpukgHZnbaU2quqYVMzy6oB8tPHil9oJ38Q8vtQloYThgArqkUPqDIDBp6lFsDkyhkUHz8UPRTWDbMPOM6tgJm7mRERnlIr0YAaaW585QGaG2PU6un28GMfgQj9MMX8Q7NGPKgcM-6ujWMLMTvEhpzknZ-OzXH-jjjULjuAyUwgL4UVyZDyWgxp6NRloKNWB94wFBwmbMbngNy15jRV7NiZEPIMPqC1TcFUWZLZeh17NH0Z_TauCViTob34vgR1uIBVd5jNUupWJeAOaeLZ7qjRbZY5lTCM0nWoofEckp_lF4er1I8zCs6hdU1n5jc7mTrpFXh7PoyE5OE8uDZyI7fJZiGLCzSXbRtF4H6qrL7cne9PGNSkFZiqcKLNLvdkP-J0JLFKL0kVbhNByNKte39pwT3tROsBPW8Unmzsprf2bXMjkX5err9udqDzD6C_oeQ3rFc2tyg6dT00rEevSnH67-QviIL5sX7B05lmzs=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="first" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">first</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rq" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">rq</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">context.jsp</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://ssp.rambler.ru/blockstat_post" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;log_visibility&quot;:0,&quot;blocktype&quot;:&quot;capirs&quot;,&quot;format&quot;:&quot;0x0&quot;,&quot;width&quot;:0,&quot;height&quot;:0,&quot;time&quot;:1,&quot;ftime&quot;:7501,&quot;ftime_intersection&quot;:7501,&quot;place&quot;:&quot;&quot;,&quot;pad_id&quot;:469345540,&quot;block_id&quot;:492316873,&quot;reason&quot;:&quot;no_banner&quot;,&quot;reached&quot;:2,&quot;impression_id&quot;:&quot;60508-a96ed-c6d17&quot;,&quot;uuid&quot;:&quot;00000bbc-6050-a8d4-6878-1d955f72b49f&quot;,&quot;fp&quot;:&quot;pA8AAN9Js1fMQNL2ARGPuAA=&quot;,&quot;fp_version&quot;:&quot;1.1.0&quot;,&quot;ip_used_by_fp&quot;:&quot;178.176.175.135&quot;,&quot;experimental_fps&quot;:{&quot;firstIPByte&quot;:&quot;pA8AAN9Js1eIvCKxAX7N8QA=&quot;,&quot;joinedFirstIPByte&quot;:&quot;pA8AAN9Js1fxmJmRAYGXtgA=178&quot;,&quot;joinedFirstSecondIPBytes&quot;:&quot;pA8AAN9Js1fxmJmRAYGXtgA=178176&quot;,&quot;withoutIP&quot;:&quot;pA8AAN9Js1fxmJmRAYGXtgA=&quot;},&quot;vcapirs&quot;:&quot;8_1_0&quot;,&quot;misc&quot;:0,&quot;rq_type&quot;:0,&quot;browser_family&quot;:&quot;Chrome&quot;,&quot;browser_version&quot;:&quot;88.0.4324.192&quot;,&quot;os_family&quot;:&quot;Mac OS&quot;,&quot;os_version&quot;:&quot;10.14.4&quot;,&quot;device_type&quot;:1,&quot;pageNumber&quot;:0,&quot;node_id&quot;:&quot;block_pad_id_492316873_469345540&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_5}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">blockstat_post</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://kraken.rambler.ru/cnt/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fid</stringProp>
                  <stringProp name="Argument.value">pA8AAN9Js1fxmJmRAYGXtgA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eid</stringProp>
                  <stringProp name="Argument.value">84161615898991427</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.15.0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bl</stringProp>
                  <stringProp name="Argument.value">[&quot;cerber-topline::search-top::user::login&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">4455308</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rid</stringProp>
                  <stringProp name="Argument.value">1615898987.346-780576661</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sp</stringProp>
                  <stringProp name="Argument.value">[&quot;a0&quot;,&quot;a9&quot;,&quot;a11&quot;,&quot;a12&quot;,&quot;a13&quot;,&quot;b14&quot;,&quot;b23&quot;,&quot;a26&quot;,&quot;b28&quot;,&quot;a29&quot;,&quot;a30&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tid</stringProp>
                  <stringProp name="Argument.value">t1.29811.1088768907.1615898839194</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="et" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">et</stringProp>
                  <stringProp name="Argument.value">bv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_9}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">cnt/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">0</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${__threadGroupName}_CLICK ${__threadNum}" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="https://kraken.rambler.ru/cnt/" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">fid</stringProp>
                  <stringProp name="Argument.value">pA8AAN9Js1fxmJmRAYGXtgA=</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="eid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">eid</stringProp>
                  <stringProp name="Argument.value">77691615899014719</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">v</stringProp>
                  <stringProp name="Argument.value">1.15.0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="bl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">bl</stringProp>
                  <stringProp name="Argument.value">[&quot;${link}&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="pid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">pid</stringProp>
                  <stringProp name="Argument.value">4455308</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="rid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">rid</stringProp>
                  <stringProp name="Argument.value">1615898987.346-780576661</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="sp" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">sp</stringProp>
                  <stringProp name="Argument.value">[&quot;a0&quot;,&quot;a9&quot;,&quot;a11&quot;,&quot;a12&quot;,&quot;a13&quot;,&quot;b14&quot;,&quot;b23&quot;,&quot;a26&quot;,&quot;b28&quot;,&quot;a29&quot;,&quot;a30&quot;]</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="tid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">tid</stringProp>
                  <stringProp name="Argument.value">t1.29811.1088768907.1615898839194</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="et" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">et</stringProp>
                  <stringProp name="Argument.value">cl</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_9}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">cnt/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
          <intProp name="calcMode">0</intProp>
          <doubleProp>
            <name>throughput</name>
            <value>10.0</value>
            <savedValue>0.0</savedValue>
          </doubleProp>
        </ConstantThroughputTimer>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="false">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://localhost:8086/write?db=jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">rambler_session</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Test name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
